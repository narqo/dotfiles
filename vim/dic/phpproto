class_exists(string.classname)
create_function(string.args,string.code)
define(string.constant_name)
define(string.constant_name,mixed.value,case_sensitive=true)
each(array.arr)
error_reporting(int.new_error_level=null)
extension_loaded(string.extension_name)
func_get_arg(int.arg_num)
func_get_args()
func_num_args(void)
function_exists(string.function_name)
get_class(object.object)
get_class_methods(mixed.class)
get_class_vars(string.class_name)
get_declared_classes(void)
get_defined_constants(void)
get_defined_functions(void)
get_defined_vars(void)
get_extension_funcs(string.extension_name)
get_included_files(void)
get_loaded_extensions(void)
get_object_vars(object.obj)
get_parent_class(mixed.object)
is_subclass_of(object.object,string.class_name)
leak(int.num_bytes=3)
method_exists(object.object,string.method)
restore_error_handler(void)
set_error_handler(string.error_handler)
strcasecmp(string.str1,string.str2)
strcmp(string.str1,string.str2)
strlen(string.str)
strncasecmp(string.str1,string.str2,int.len)
strncmp(string.str1,string.str2,int.len)
trigger_error(string.messsage[,int.error_type])
zend_version(void)
aspell_check(aspell.int,string.word)
aspell_check_raw(aspell.int,string.word)
aspell_new(string.master[,string.personal])
aspell_suggest(aspell.int,string.word)
bcadd(string.left_operand,string.right_operand[,int.scale])
bccomp(string.left_operand,string.right_operand[,int.scale])
bcdiv(string.left_operand,string.right_operand[,int.scale])
bcmod(string.left_operand,string.right_operand)
bcmul(string.left_operand,string.right_operand[,int.scale])
bcpow(string.x,string.y[,int.scale])
bcscale(int.scale)
bcsqrt(string.operand[,int.scale])
bcsub(string.left_operand,string.right_operand[,int.scale])
bzclose(resource.bz)
bzcompress(string.source[,int.blocksize100k[,int.workfactor]])
bzdecompress(string.source[,int.small])
bzerrno(resource.bz)
bzerror(resource.bz)
bzerrstr(resource.bz)
bzflush(resource.bz)
bzopen(string|int.file|fp,string.mode)
bzread(resource.bz[,int.len])
bzwrite(resource.bz,string.data[,int.len])
jdtounix(int.jday)
unixtojd([int.timestamp])
cal_days_in_month(int.calendar,int.month,int.year)
cal_from_jd(int.jd,int.calendar)
cal_info(int.calendar)
cal_to_jd(int.calendar,int.month,int.day,int.year)
frenchtojd(int.month,int.day,int.year)
gregoriantojd(int.month,int.day,int.year)
jddayofweek(int.juliandaycount[,int.mode])
jdmonthname(int.juliandaycount,int.mode)
jdtofrench(int.juliandaycount)
jdtogregorian(int.juliandaycount)
jdtojewish(int.juliandaycount)
jdtojulian(int.juliandaycount)
jewishtojd(int.month,int.day,int.year)
juliantojd(int.month,int.day,int.year)
easter_date([int.year])
easter_days([int.year])
ccvs_add(string.session,string.invoice,string.argtype,string.argval)
ccvs_auth(string.session,string.invoice)
ccvs_command(string.session,string.type,string.argval)
ccvs_count(string.session,string.type)
ccvs_delete(string.session,string.invoice)
ccvs_done(string.sess)
ccvs_init(string.name)
ccvs_lookup(string.session,string.invoice,int.inum)
ccvs_new(string.session,string.invoice)
ccvs_report(string.session,string.type)
ccvs_return(string.session,string.invoice)
ccvs_reverse(string.session,string.invoice)
ccvs_sale(string.session,string.invoice)
ccvs_status(string.session,string.invoice)
ccvs_textvalue(string.session)
ccvs_void(string.session,string.invoice)
com_addref(int.module)
com_invoke(int.module,string.handler_name[,mixed.arg[,mixed....]])
com_isenum(object.com_module)
com_load(string.module_name[,string.remote_host[,int.codepage[,string.typelib]]])
com_load_typelib(string.typelib_name[,int.case_insensitive])
com_propget(int.module,string.property_name)
com_propput(int.module,string.property_name,mixed.value)
com_release(int.module)
cpdf_add_annotation(int.pdfdoc,float.xll,float.yll,float.xur,float.xur,string.title,string.text[,int.mode])
cpdf_add_outline(int.pdfdoc,int.lastoutline,int.sublevel,int.open,int.pagenr,string.title)
cpdf_arc(int.pdfdoc,float.x,float.y,float.radius,float.start,float.end[,int.mode])
cpdf_begin_text(int.pdfdoc)
cpdf_circle(int.pdfdoc,float.x,float.y,float.radius[,int.mode])
cpdf_clip(int.pdfdoc)
cpdf_close(int.pdfdoc)
cpdf_closepath(int.pdfdoc)
cpdf_closepath_fill_stroke(int.pdfdoc)
cpdf_closepath_stroke(int.pdfdoc)
cpdf_continue_text(int.pdfdoc,string.text)
cpdf_curveto(int.pdfdoc,float.x1,float.y1,float.x2,float.y2,float.x3,float.y3[,int.mode])
cpdf_end_text(int.pdfdoc)
cpdf_fill(int.pdfdoc)
cpdf_fill_stroke(int.pdfdoc)
cpdf_finalize(int.pdfdoc)
cpdf_finalize_page(int.pdfdoc,int.pagenr)
cpdf_global_set_document_limits(int.maxPages,int.maxFonts,int.maxImages,int.maxAnnots,int.maxObjects)
cpdf_import_jpeg(int.pdfdoc,string.filename,float.x,float.y,float.angle,float.width,float.height,float.x_scale,float.y_scale,int.gsave[,int.mode])
cpdf_lineto(int.pdfdoc,float.x,float.y[,int.mode])
cpdf_moveto(int.pdfdoc,float.x,float.y[,int.mode])
cpdf_newpath(int.pdfdoc)
cpdf_open(int.compression[,string.filename[,array.doc_limits]])
cpdf_output_buffer(int.pdfdoc)
cpdf_page_init(int.pdfdoc,int.pagenr,int.orientation,int.height,int.width[,float.unit])
cpdf_place_inline_image(int.pdfdoc,int.gdimage,float.x,float.y,float.angle,fload.width,float.height,int.gsave[,int.mode])
cpdf_rect(int.pdfdoc,float.x,float.y,float.width,float.height[,int.mode])
cpdf_restore(int.pdfdoc)
cpdf_rlineto(int.pdfdoc,float.x,float.y[,int.mode])
cpdf_rmoveto(int.pdfdoc,float.x,float.y[,int.mode])
cpdf_rotate(int.pdfdoc,float.angle)
cpdf_rotate_text(int.pdfdoc,float.angle)
cpdf_save(int.pdfdoc)
cpdf_save_to_file(int.pdfdoc,string.filename)
cpdf_scale(int.pdfdoc,float.x_scale,float.y_scale)
cpdf_set_action_url(int.pdfdoc,float.xll,float.yll,float.xur,float.xur,string.url[,int.mode])
cpdf_set_char_spacing(int.pdfdoc,float.space)
cpdf_set_creator(int.pdfdoc,string.creator)
cpdf_set_current_page(int.pdfdoc,int.pagenr)
cpdf_set_font(int.pdfdoc,string.font,float.size,string.encoding)
cpdf_set_font_directories(int.pdfdoc,string.pfmdir,string.pfbdir)
cpdf_set_font_map_file(int.pdfdoc,string.filename)
cpdf_set_horiz_scaling(int.pdfdoc,float.scale)
cpdf_set_keywords(int.pdfptr,string.keywords)
cpdf_set_leading(int.pdfdoc,float.distance)
cpdf_set_page_animation(int.pdfdoc,int.transition,float.duration,float.direction,int.orientation,int.inout)
cpdf_set_subject(int.pdfptr,string.subject)
cpdf_set_text_matrix(int.pdfdoc,arry.matrix)
cpdf_set_text_pos(int.pdfdoc,float.x,float.y[,int.mode])
cpdf_set_text_rendering(int.pdfdoc,int.rendermode)
cpdf_set_text_rise(int.pdfdoc,float.value)
cpdf_set_title(int.pdfptr,string.title)
cpdf_set_viewer_preferences(int.pdfdoc,array.preferences)
cpdf_set_word_spacing(int.pdfdoc,float.space)
cpdf_setdash(int.pdfdoc,long.white,long.black)
cpdf_setflat(int.pdfdoc,float.value)
cpdf_setgray(int.pdfdoc,float.value)
cpdf_setgray_fill(int.pdfdoc,float.value)
cpdf_setgray_stroke(int.pdfdoc,float.value)
cpdf_setlinecap(int.pdfdoc,int.value)
cpdf_setlinejoin(int.pdfdoc,int.value)
cpdf_setlinewidth(int.pdfdoc,float.width)
cpdf_setmiterlimit(int.pdfdoc,float.value)
cpdf_setrgbcolor(int.pdfdoc,float.red,float.green,float.blue)
cpdf_setrgbcolor_fill(int.pdfdoc,float.red,float.green,float.blue)
cpdf_setrgbcolor_stroke(int.pdfdoc,float.red,float.green,float.blue)
cpdf_show(int.pdfdoc,string.text)
cpdf_show_xy(int.pdfdoc,string.text,float.x-koor,float.y-koor[,int.mode])
cpdf_stringwidth(int.pdfdoc,string.text)
cpdf_stroke(int.pdfdoc)
cpdf_text(int.pdfdoc,string.text[,float.x-koor,float.y-koor[,int.mode[,float.orientation[,int.alignmode]]]])
cpdf_translate(int.pdfdoc,float.x,float.y)
crack_check([int.dictionary,].string.password)
crack_closedict([int.link_identifier])
crack_getlastmessage(void)
crack_opendict(string.dictionary)
ctype_alnum(mixed.c)
ctype_alpha(mixed.c)
ctype_cntrl(mixed.c)
ctype_digit(mixed.c)
ctype_graph(mixed.c)
ctype_lower(mixed.c)
ctype_print(mixed.c)
ctype_punct(mixed.c)
ctype_space(mixed.c)
ctype_upper(mixed.c)
ctype_xdigit(mixed.c)
curl_close(int.ch)
curl_errno(int.ch)
curl_error(int.ch)
curl_exec(int.ch)
curl_getinfo(int.ch,int.opt)
curl_init([string.url])
curl_setopt(int.ch,string.option,mixed.value)
curl_version(void)
cybercash_base64_decode(string.data)
cybercash_base64_encode(string.data)
cybercash_decr(string.wmp,string.sk,string.data)
cybercash_encr(string.wmk,string.sk,string.data)
cybermut_creerformulairecm(string.url_CM,string.version,string.TPE,string.montant,string.ref_commande,string.texte_libre,string.url_retour,string.url_retour_ok,string.url_retour_err,string.langue,string.code_societe,string.texte_bouton)
cybermut_creerreponsecm(string.phrase)
cybermut_testmac(string.code_MAC,string.version,string.TPE,string.cdate,string.montant,string.ref_commande,string.texte_libre,string.code_retour)
cyrus_authenticate(.resource.connection[,string.mechlist[,string.service[,string.user[,int.minssf[,int.maxssf]]]]])
cyrus_bind(.resource.connection,array.callbacks)
cyrus_close(.resource.connection)
cyrus_connect([.string.host[,string.port[,int.flags]]])
cyrus_query(.resource.connection,string.query)
cyrus_unbind(.resource.connection,string.trigger_name)
dblist(void)
dbmclose(int.dbm_identifier)
dbmdelete(int.dbm_identifier,string.key)
dbmexists(int.dbm_identifier,string.key)
dbmfetch(int.dbm_identifier,string.key)
dbmfirstkey(int.dbm_identifier)
dbminsert(int.dbm_identifier,string.key,string.value)
dbmnextkey(int.dbm_identifier,string.key)
dbmopen(string.filename,string.mode)
dbmreplace(int.dbm_identifier,string.key,string.value)
dba_close(int.handle)
dba_delete(string.key,int.handle)
dba_exists(string.key,int.handle)
dba_fetch(string.key,int.handle)
dba_firstkey(int.handle)
dba_insert(string.key,string.value,int.handle)
dba_nextkey(int.handle)
dba_open(string.path,string.mode,string.handlername[,string....])
dba_optimize(int.handle)
dba_popen(string.path,string.mode,string.handlername[,string....])
dba_replace(string.key,string.value,int.handle)
dba_sync(int.handle)
dbase_add_record(int.identifier,array.data)
dbase_close(int.identifier)
dbase_create(string.filename,array.fields)
dbase_delete_record(int.identifier,int.record)
dbase_get_record(int.identifier,int.record)
dbase_get_record_with_names(int.identifier,int.record)
dbase_numfields(int.identifier)
dbase_numrecords(int.identifier)
dbase_open(string.name,int.mode)
dbase_pack(int.identifier)
dbase_replace_record(int.identifier,array.data,int.recnum)
dbplus_add(int.relation,array.tuple)
dbplus_aql(string.query[,string.server[,string.dbpath]])
dbplus_chdir([string.newdir])
dbplus_close(int.relation)
dbplus_curr(int.relation,array.tuple)
dbplus_errcode(int.err)
dbplus_errno(void)
dbplus_find(int.relation,array.constr,mixed.tuple)
dbplus_first(int.relation,array.tuple)
dbplus_flush(int.relation)
dbplus_freealllocks(void)
dbplus_freelock(int.relation,array.tuple)
dbplus_freerlocks(int.relation)
dbplus_getlock(int.relation,array.tuple)
dbplus_getunique(int.handle,int.uniqueid)
dbplus_info(int.relation,string.key,array.&result)
dbplus_last(int.relation,array.tuple)
dbplus_lockrel(int.relation)
dbplus_next(int.relation,array.&tname)
dbplus_open(string.name)
dbplus_prev(int.relation,array.tuple)
dbplus_rchperm(int.relation,int.mask,string.user,string.group)
dbplus_rcreate(string.name,mixed.domlist[,int.overwrite])
dbplus_rcrtexact(string.name,resource.relation[,boolean.overwrite])
dbplus_rcrtlike(string.name,int.handle[,int.overwrite])
dbplus_resolve(string.name)
dbplus_restorepos(int.relation,array.tuple)
dbplus_rkeys(resource.relation,mixed.domlist)
dbplus_ropen(string.name)
dbplus_rquery(string.name,string.dbpath)
dbplus_rrename(int.relation,string.name)
dbplus_rsecindex(resource.relation,mixed.domlist,int.compact)
dbplus_runlink(int.relation)
dbplus_rzap(int.relation,int.truncate)
dbplus_savepos(int.relation)
dbplus_setindex(int.relation,string.idx_name)
dbplus_setindexbynumber(int.relation,int.idx_number)
dbplus_sql(string.query,string.server,string.dbpath)
dbplus_tcl(int.sid,string.script)
dbplus_tremove(int.relation,array.old[,array.current])
dbplus_undo(int.relation)
dbplus_undoprepare(int.relation)
dbplus_unlockrel(int.relation)
dbplus_unselect(int.relation)
dbplus_update(int.relation,array.old,array.new)
dbplus_xlockrel(int.relation)
dbplus_xunlockrel(int.relation)
dbx_close(dbx_link_object.dbx_link)
dbx_compare(array.row_x,array.row_y,string.columnname[,int.flags])
dbx_connect(string.module_name,string.host,string.db,string.username,string.password[,bool.persistent])
dbx_error(dbx_link_object.dbx_link)
dbx_query(dbx_link_object.dbx_link,string.sql_statement[,long.flags])
dbx_sort(object.dbx_result,string.compare_function_name)
dio_close(resource.fd)
dio_fcntl(resource.fd,int.cmd[,mixed.arg])
dio_open(string.filename,int.flags[,int.mode])
dio_read(resource.fd[,int.n])
dio_seek(resource.fd,int.pos,int.whence)
dio_stat(resource.fd)
dio_truncate(resource.fd,int.offset)
dio_write(resource.fd,string.data[,int.len])
domxml_add_root(string.name)
domxml_attr_name(void)
domxml_attr_specified(void)
domxml_attr_value(void)
domxml_cdata_length(void)
domxml_clone_node(void)
domxml_doc_create_attribute(string.name)
domxml_doc_create_cdata_section(string.name)
domxml_doc_create_comment(string.name)
domxml_doc_create_element(string.name)
domxml_doc_create_entity_reference(string.name)
domxml_doc_create_processing_instruction(string.name)
domxml_doc_create_text_node(string.name)
domxml_doc_doctype(void)
domxml_doc_document_element(void)
domxml_doc_implementation(void)
domxml_doc_imported_node(object.node,bool.recursive)
domxml_doctype_name(void)
domxml_dtd(void)
domxml_dump_mem([object.doc_handle])
domxml_dump_mem_file([object.doc_handle],filename,compressmode)
domxml_dump_node([object.doc_handle],object.node_handle[,int.format[,int.level]])
domxml_elem_get_attribute(string.attrname)
domxml_elem_get_attribute_node(string.attrname)
domxml_elem_get_element_by_tagname(string.tagname)
domxml_elem_remove_attribute(string.attrname)
domxml_elem_set_attribute(string.attrname,string.value)
domxml_elem_set_attribute_node(int.attr)
domxml_elem_tagname(void)
domxml_element(string.name)
domxml_html_dump_mem([int.doc_handle])
domxml_is_blank_node(void)
domxml_new_xmldoc(string.version)
domxml_node(string.name)
domxml_node_add_child(object.domnode)
domxml_node_append_child(object.domnode)
domxml_node_attributes(void)
domxml_node_children(void)
domxml_node_first_child(void)
domxml_node_get_content()
domxml_node_has_attributes(void)
domxml_node_has_child_nodes(void)
domxml_node_insert_before(object.newnode,object.refnode)
domxml_node_last_child(void)
domxml_node_name(void)
domxml_node_new_child(string.name,string.content)
domxml_node_next_sibling(void)
domxml_node_owner_document(void)
domxml_node_parent(void)
domxml_node_prefix(void)
domxml_node_previous_sibling(void)
domxml_node_replace_node(object.domnode)
domxml_node_set_content(string.content)
domxml_node_set_name(string.name)
domxml_node_text_concat(string.content)
domxml_node_type(void)
domxml_node_unlink_node([object.node])
domxml_node_value(void)
domxml_notation_public_id(void)
domxml_notation_system_id(void)
domxml_pi_data(void)
domxml_pi_target(void)
domxml_substitute_entities_default(bool.enable)
domxml_test(int.id)
domxml_version(void)
domxml_xslt_process(object.xslstylesheet,object.xmldoc[,array.xslt_parameters[,bool.xpath_parameters]])
domxml_xslt_stylesheet(string.xsltstylesheet)
domxml_xslt_stylesheet_doc(object.xmldoc)
domxml_xslt_stylesheet_file(string.filename)
domxml_xslt_version(void)
html_doc(string.html_doc[,bool.from_file])
html_doc_file(string.filename)
node_attributes(zval.**attributes,int.node)
node_children([int.node])
node_namespace([int.node])
xmldoc(string.xmldoc[,bool.from_file])
xmldocfile(string.filename)
xmltree(string.xmltree)
xpath_eval([object.xpathctx_handle,].string.str)
xpath_eval_expression([object.xpathctx_handle,].string.str)
xpath_init(void)
xpath_new_context([int.doc_handle])
xpath_register_ns([object.xpathctx_handle,].string.namespace_prefix,string.namespace_uri)
xptr_eval([int.xpathctx_handle,].string.str)
xptr_new_context([int.doc_handle])
exif_read_data(string.filename[,string.sections[,int.arrays[,int.htumbnail]]])
exif_thumbnail(string.filename)
fbsql_affected_rows([resource.link_identifier])
fbsql_autocommit(resource.link_identifier[,bool.OnOff])
fbsql_blob_size(string.blob_handle[,resource.link_identifier])
fbsql_change_user(string.user,string.password[,string.database[,resource.link_identifier]])
fbsql_clob_size(string.clob_handle[,resource.link_identifier])
fbsql_close([resource.link_identifier])
fbsql_commit([resource.link_identifier])
fbsql_connect([string.hostname[,string.username[,string.password]]])
fbsql_create_blob(string.blob_data[,resource.link_identifier])
fbsql_create_clob(string.clob_data[,resource.link_identifier])
fbsql_create_db(string.database_name[,resource.link_identifier])
fbsql_data_seek(int.result,int.row_number)
fbsql_database(resource.link_identifier[,string.database])
fbsql_database_password(resource.link_identifier[,string.database_password])
fbsql_db_query(string.database_name,string.query[,resource.link_identifier])
fbsql_db_status(string.database_name[,resource.link_identifier])
fbsql_drop_db(string.database_name[,resource.link_identifier])
fbsql_errno([resource.link_identifier])
fbsql_error([resource.link_identifier])
fbsql_fetch_array(resource.result[,int.result_type])
fbsql_fetch_assoc(resource.result)
fbsql_fetch_field(int.result[,int.field_index])
fbsql_fetch_lengths(int.result)
fbsql_fetch_object(resource.result[,int.result_type])
fbsql_fetch_row(resource.result)
fbsql_field_flags(int.result[,int.field_index])
fbsql_field_len(int.result[,int.field_index])
fbsql_field_name(int.result[,int.field_index])
fbsql_field_seek(int.result[,int.field_index])
fbsql_field_table(int.result[,int.field_index])
fbsql_field_type(int.result[,int.field_index])
fbsql_free_result(int.result)
fbsql_get_autostart_info([resource.link_identifier])
fbsql_hostname(resource.link_identifier[,string.host_name])
fbsql_insert_id([resource.link_identifier])
fbsql_list_dbs([resource.link_identifier])
fbsql_list_fields(string.database_name,string.table_name[,resource.link_identifier])
fbsql_list_tables(string.database[,int.link_identifier])
fbsql_next_result(int.result)
fbsql_num_fields(int.result)
fbsql_num_rows(int.result)
fbsql_password(resource.link_identifier[,string.password])
fbsql_pconnect([string.hostname[,string.username[,string.password]]])
fbsql_query(string.query[,resource.link_identifier])
fbsql_read_blob(string.blob_handle[,resource.link_identifier])
fbsql_read_clob(string.clob_handle[,resource.link_identifier])
fbsql_result(int.result[,int.row[,mixed.field]])
fbsql_rollback([resource.link_identifier])
fbsql_select_db([string.database_name[,resource.link_identifier]])
fbsql_set_lob_mode(resource.result,int.lob_mode)
fbsql_set_transaction(resource.link_identifier,int.locking,int.isolation)
fbsql_start_db(string.database_name[,resource.link_identifier])
fbsql_stop_db(string.database_name[,resource.link_identifier])
fbsql_username(resource.link_identifier[,string.username])
fbsql_warnings([int.flag])
fdf_add_template(int.fdfdoc,int.newpage,string.filename,string.template,int.rename)
fdf_close(int.fdfdoc)
fdf_create(void)
fdf_get_file(int.fdfdoc)
fdf_get_status(int.fdfdoc)
fdf_get_value(int.fdfdoc,string.fieldname)
fdf_next_field_name(int.fdfdoc[,string.fieldname])
fdf_open(string.filename)
fdf_save(int.fdfdoc,string.filename)
fdf_set_ap(int.fdfdoc,string.fieldname,int.face,string.filename,int.pagenr)
fdf_set_encoding(int.fdf_document,string.encoding)
fdf_set_file(int.fdfdoc,string.filename)
fdf_set_flags(int.fdfdoc,string.fieldname,int.whichflags,int.newflags)
fdf_set_javascript_action(int.fdfdoc,string.fieldname,int.whichtrigger,string.script)
fdf_set_opt(int.fdfdoc,string.fieldname,int.element,string.value,string.name)
fdf_set_status(int.fdfdoc,string.status)
fdf_set_submit_form_action(int.fdfdoc,string.fieldname,int.whichtrigger,string.url,int.flags)
fdf_set_value(int.fdfdoc,string.fieldname,string.value,int.isname)
filepro(string.directory)
filepro_fieldcount(void)
filepro_fieldname(int.fieldnumber)
filepro_fieldtype(int.field_number)
filepro_fieldwidth(int.field_number)
filepro_retrieve(int.row_number,int.field_number)
filepro_rowcount(void)
fribidi_log2vis(string.str,string.direction,int.charset)
ftp_cdup(resource.stream)
ftp_chdir(resource.stream,string.directory)
ftp_close(resource.stream)
ftp_connect(string.host[,int.port[,int.timeout)]])
ftp_delete(resource.stream,string.file)
ftp_exec(resource.stream,string.command)
ftp_fget(resource.stream,resource.fp,string.remote_file,int.mode)
ftp_fput(resource.stream,string.remote_file,resource.fp,int.mode)
ftp_get(resource.stream,string.local_file,string.remote_file,int.mode)
ftp_get_option(resource.stream,int.option)
ftp_login(resource.stream,string.username,string.password)
ftp_mdtm(resource.stream,string.filename)
ftp_mkdir(resource.stream,string.directory)
ftp_nlist(resource.stream,string.directory)
ftp_pasv(resource.stream,bool.pasv)
ftp_put(resource.stream,string.remote_file,string.local_file,int.mode)
ftp_pwd(resource.stream)
ftp_rawlist(resource.stream,string.directory)
ftp_rename(resource.stream,string.src,string.dest)
ftp_rmdir(resource.stream,string.directory)
ftp_set_option(resource.stream,int.option,mixed.value)
ftp_site(resource.stream,string.cmd)
ftp_size(resource.stream,string.filename)
ftp_systype(resource.stream)
image2wbmp(int.im[,string.filename[,int.threshold]])
imagealphablending(resource.im,bool.on)
imagearc(int.im,int.cx,int.cy,int.w,int.h,int.s,int.e,int.col)
imagechar(int.im,int.font,int.x,int.y,string.c,int.col)
imagecharup(int.im,int.font,int.x,int.y,string.c,int.col)
imagecolorallocate(int.im,int.red,int.green,int.blue)
imagecolorat(int.im,int.x,int.y)
imagecolorclosest(int.im,int.red,int.green,int.blue)
imagecolorclosestalpha(resource.im,int.red,int.green,int.blue,int.alpha)
imagecolorclosesthwb(int.im,int.red,int.green,int.blue)
imagecolordeallocate(int.im,int.index)
imagecolorexact(int.im,int.red,int.green,int.blue)
imagecolorexactalpha(resource.im,int.red,int.green,int.blue,int.alpha)
imagecolorresolve(int.im,int.red,int.green,int.blue)
imagecolorresolvealpha(resource.im,int.red,int.green,int.blue,int.alpha)
imagecolorset(int.im,int.col,int.red,int.green,int.blue)
imagecolorsforindex(int.im,int.col)
imagecolorstotal(int.im)
imagecolortransparent(int.im[,int.col])
imagecopy(int.dst_im,int.src_im,int.dst_x,int.dst_y,int.src_x,int.src_y,int.src_w,int.src_h)
imagecopymerge(int.src_im,int.dst_im,int.dst_x,int.dst_y,int.src_x,int.src_y,int.src_w,int.src_h,int.pct)
imagecopymergegray(int.src_im,int.dst_im,int.dst_x,int.dst_y,int.src_x,int.src_y,int.src_w,int.src_h,int.pct)
imagecopyresampled(int.dst_im,int.src_im,int.dst_x,int.dst_y,int.src_x,int.src_y,int.dst_w,int.dst_h,int.src_w,int.src_h)
imagecopyresized(int.dst_im,int.src_im,int.dst_x,int.dst_y,int.src_x,int.src_y,int.dst_w,int.dst_h,int.src_w,int.src_h)
imagecreate(int.x_size,int.y_size)
imagecreatefromgd(string.filename)
imagecreatefromgd2(string.filename)
imagecreatefromgd2part(string.filename,int.srcX,int.srcY,int.width,int.height)
imagecreatefromgif(string.filename)
imagecreatefromjpeg(string.filename)
imagecreatefrompng(string.filename)
imagecreatefromstring(string.image)
imagecreatefromwbmp(string.filename)
imagecreatefromxbm(string.filename)
imagecreatefromxpm(string.filename)
imagecreatetruecolor(int.x_size,int.y_size)
imagedashedline(int.im,int.x1,int.y1,int.x2,int.y2,int.col)
imagedestroy(int.im)
imageellipse(resource.im,int.cx,int.cy,int.w,int.h,int.color)
imagefill(int.im,int.x,int.y,int.col)
imagefilledarc(int.im,int.cx,int.cy,int.w,int.h,int.s,int.e,int.col,int.style)
imagefilledellipse(resource.im,int.cx,int.cy,int.w,int.h,int.color)
imagefilledpolygon(int.im,array.point,int.num_points,int.col)
imagefilledrectangle(int.im,int.x1,int.y1,int.x2,int.y2,int.col)
imagefilltoborder(int.im,int.x,int.y,int.border,int.col)
imagefontheight(int.font)
imagefontwidth(int.font)
imageftbbox(int.size,int.angle,string.font_file,string.text[,array.extrainfo])
imagefttext(int.im,int.size,int.angle,int.x,int.y,int.col,string.font_file,string.text,[array.extrainfo])
imagegammacorrect(int.im,float.inputgamma,float.outputgamma)
imagegd(int.im[,string.filename])
imagegd2(int.im[,string.filename])
imagegif(int.im[,string.filename])
imageinterlace(int.im[,int.interlace])
imagejpeg(int.im[,string.filename[,int.quality]])
imageline(int.im,int.x1,int.y1,int.x2,int.y2,int.col)
imageloadfont(string.filename)
imagepalettecopy(int.dst,int.src)
imagepng(int.im[,string.filename])
imagepolygon(int.im,array.point,int.num_points,int.col)
imagepsbbox(string.text,int.font,int.size[,int.space,int.tightness,int.angle])
imagepscopyfont(int.font_index)
imagepsencodefont(int.font_index,string.filename)
imagepsextendfont(int.font_index,float.extend)
imagepsfreefont(int.font_index)
imagepsloadfont(string.pathname)
imagepsslantfont(int.font_index,float.slant)
imagepstext(int.image,string.text,int.font,int.size,int.xcoord,int.ycoord[,int.space,int.tightness,float.angle,int.antialias])
imagerectangle(int.im,int.x1,int.y1,int.x2,int.y2,int.col)
imagesetbrush(resource.image,resource.brush)
imagesetpixel(int.im,int.x,int.y,int.col)
imagesetstyle(resource.im,array.styles)
imagesetthickness(resource.im,int.thickness)
imagesettile(resource.image,resource.tile)
imagestring(int.im,int.font,int.x,int.y,string.str,int.col)
imagestringup(int.im,int.font,int.x,int.y,string.str,int.col)
imagesx(int.im)
imagesy(int.im)
imagetruecolortopalette(resource.im,bool.ditherFlag,int.colorsWanted)
imagettfbbox(int.size,int.angle,string.font_file,string.text)
imagettftext(int.im,int.size,int.angle,int.x,int.y,int.col,string.font_file,string.text)
imagetypes(void)
imagewbmp(int.im[,string.filename,[,int.foreground]])
jpeg2wbmp.(string.f_org,string.f_dest,int.d_height,int.d_width,int.threshold)
png2wbmp.(string.f_org,string.f_dest,int.d_height,int.d_width,int.threshold)
imagepsbbox(string.text,int.font,int.size[,int.space,int.tightness,int.angle])
imagepsencodefont(int.font_index,string.filename)
imagepsextendfont(int.font_index,float.extend)
imagepsfreefont(int.font_index)
imagepsloadfont(string.pathname)
imagepsslantfont(int.font_index,float.slant)
imagepstext(int.image,string.text,int.font,int.size,int.xcoord,int.ycoord[,int.space,int.tightness,float.angle,int.antialias])
bind_textdomain_codeset.(string.domain,string.codeset)
bindtextdomain(string.domain_name,string.dir)
dcgettext(string.domain_name,string.msgid,long.category)
dcngettext.(string.domain,string.msgid1,string.msgid2,int.n,int.category)
dgettext(string.domain_name,string.msgid)
dngettext.(string.domain,string.msgid1,string.msgid2,int.count)
gettext(string.msgid)
ngettext(string.MSGID1,string.MSGID2,int.N)
textdomain(string.domain)
gmp_abs(resource.a)
gmp_add(resource.a,resource.b)
gmp_and(resource.a,resource.b)
gmp_clrbit(resource.&a,int.index)
gmp_cmp(resource.a,resource.b)
gmp_com(resource.a)
gmp_div_q(resource.a,resource.b[,int.round])
gmp_div_qr(resource.a,resource.b[,int.round])
gmp_div_r(resource.a,resource.b[,int.round])
gmp_divexact(resource.a,resource.b)
gmp_fact(int.a)
gmp_gcd(resource.a,resource.b)
gmp_gcdext(resource.a,resource.b)
gmp_hamdist(resource.a,resource.b)
gmp_init(mixed.number[,int.base])
gmp_intval(resource.gmpnumber)
gmp_invert(resource.a,resource.b)
gmp_jacobi(resource.a,resource.b)
gmp_legendre(resource.a,resource.b)
gmp_mod(resource.a,resource.b)
gmp_mul(resource.a,resource.b)
gmp_neg(resource.a)
gmp_or(resource.a,resource.b)
gmp_perfect_square(resource.a)
gmp_popcount(resource.a)
gmp_pow(resource.base,int.exp)
gmp_powm(resource.base,resource.exp,resource.mod)
gmp_prob_prime(resource.a[,int.reps])
gmp_random([int.limiter])
gmp_scan0(resource.a,int.start)
gmp_scan1(resource.a,int.start)
gmp_setbit(resource.&a,int.index[,bool.set_clear])
gmp_sign(resource.a)
gmp_sqrt(resource.a)
gmp_sqrtrem(resource.a)
gmp_strval(resource.gmpnumber[,int.base])
gmp_sub(resource.a,resource.b)
gmp_xor(resource.a,resource.b)
hw_array2objrec(array.objarr)
hw_changeobject(int.link,int.objid,array.attributes)
hw_children(int.link,int.objid)
hw_childrenobj(int.link,int.objid)
hw_close(int.link)
hw_connect(string.host,int.port[string.username[,string.password]])
hw_connection_info(int.link)
hw_cp(int.link,array.objrec,int.dest)
hw_deleteobject(int.link,int.objid)
hw_docbyanchor(int.link,int.anchorid)
hw_docbyanchorobj(int.link,int.anchorid)
hw_document_attributes(hwdoc.doc)
hw_document_bodytag(hwdoc.doc[,string.prefix])
hw_document_content(hwdoc.doc)
hw_document_setcontent(hwdoc.doc,string.content)
hw_document_size(hwdoc.doc)
hw_documentattributes(hwdoc.doc)
hw_documentbodytag(hwdoc.doc[,string.prefix])
hw_documentsize(hwdoc.doc)
hw_dummy(int.link,int.id,int.msgid)
hw_edittext(int.link,hwdoc.doc)
hw_error(int.link)
hw_errormsg(int.link)
hw_free_document(hwdoc.doc)
hw_getanchors(int.link,int.objid)
hw_getanchorsobj(int.link,int.objid)
hw_getandlock(int.link,int.objid)
hw_getcgi(int.link,int.objid)
hw_getchildcoll(int.link,int.objid)
hw_getchildcollobj(int.link,int.objid)
hw_getchilddoccoll(int.link,int.objid)
hw_getchilddoccollobj(int.link,int.objid)
hw_getobject(int.link,int.objid[,string.query])
hw_getobjectbyftquery(int.link,string.query,int.maxhits)
hw_getobjectbyftquerycoll(int.link,int.collid,string.query,int.maxhits)
hw_getobjectbyftquerycollobj(int.link,int.collid,string.query,int.maxhits)
hw_getobjectbyftqueryobj(int.link,string.query,int.maxhits)
hw_getobjectbyquery(int.link,string.query,int.maxhits)
hw_getobjectbyquerycoll(int.link,int.collid,string.query,int.maxhits)
hw_getobjectbyquerycollobj(int.link,int.collid,string.query,int.maxhits)
hw_getobjectbyqueryobj(int.link,string.query,int.maxhits)
hw_getparents(int.link,int.objid)
hw_getparentsobj(int.link,int.objid)
hw_getrellink(int.link,int.rootid,int.sourceid,int.destid)
hw_getremote(int.link,int.objid)
hw_getremotechildren(int.link,string.objrec)
hw_getsrcbydestobj(int.link,int.destid)
hw_gettext(int.link,int.objid[,int.rootid])
hw_getusername(int.link)
hw_identify(int.link,string.username,string.password)
hw_incollections(int.link,array.objids,array.collids,int.para)
hw_info(int.link)
hw_inscoll(int.link,int.parentid,array.objarr)
hw_insdoc(int.link,int.parentid,string.objrec[,string.text])
hw_insertanchors(int.hwdoc,array.anchorecs,array.dest[,array.urlprefixes])
hw_insertdocument(int.link,int.parentid,hwdoc.doc)
hw_insertobject(int.link,string.objrec,string.parms)
hw_mapid(int.link,int.serverid,int.destid)
hw_modifyobject(int.link,int.objid,array.remattributes,array.addattributes[,int.mode])
hw_mv(int.link,array.objrec,int.from,int.dest)
hw_new_document(string.objrec,string.data,int.size)
hw_new_document_from_file(string.objrec,string.filename)
hw_objrec2array(string.objrec,[array.format])
hw_output_document(hwdoc.doc)
hw_outputdocument(hwdoc.doc)
hw_pconnect(string.host,int.port[,string.username[,string.password]])
hw_pipecgi(int.link,int.objid)
hw_pipedocument(int.link,int.objid[,array.urlprefixes])
hw_pipedocument(int.link,int.objid)
hw_root(void)
hw_setlinkroot(int.link,int.rootid)
hw_stat(int.link)
hw_unlock(int.link,int.objid)
hw_who(int.link)
icap_close(int.stream_id[,int.options])
icap_create_calendar(int.stream_id,string.calendar)
icap_delete_calendar(int.stream_id,int.uid)
icap_delete_calendar(int.stream_id,string.calendar)
icap_delete_event(int.stream_id,int.uid)
icap_expunge(int.stream_id)
icap_fetch_event(int.stream_id,int.eventid[,int.options])
icap_list_alarms(int.stream_id,array.date,array.time)
icap_list_events(int.stream_id,int.begindate[,int.enddate])
icap_open(string.calendar,string.user,string.password[,int.options])
icap_popen(void)
icap_rename_calendar(int.stream_id,string.src_calendar,string.dest_calendar)
icap_reopen(int.stream_id,string.calendar[,int.options])
icap_snooze(int.stream_id,int.uid)
icap_store_event(int.stream_id,object.event)
iconv(string.in_charset,string.out_charset,string.str)
iconv_get_encoding([string.type])
iconv_set_encoding(string.type,string.charset)
ob_iconv_handler(string.contents,int.status)
iis_add_server(string.Path,string.Comment,string.ServerIP,int.ServerPort,string.HostName,int.ServerRights,int.StartServer)
iis_get_dir_security(int.ServerInstance,string.VirtualPath)
iis_get_server_by_comment(string.Comment)
iis_get_server_by_path(string.Path)
iis_get_server_rights(int.ServerInstance,string.VirtualPath)
iis_get_service_state(string.ServiceId)
iis_remove_server(int.ServerInstance)
iis_set_app_settings(int.ServerInstance,string.VirtualPath,string.Name)
iis_set_dir_security(int.ServerInstance,string.VirtualPath,int.DirectoryFlags)
iis_set_script_map(int.ServerInstance,string.VirtualPath,string.ScriptExtention)
iis_set_script_map(int.ServerInstance,string.VirtualPath,string.ScriptExtention,string.EnginePath,int.AllowScripting)
iis_set_server_rights(int.ServerInstance,string.VirtualPath,int.ServerFlags)
iis_start_server(int.ServerInstance)
iis_stop_server(int.ServerInstance)
iis_stop_service(string.ServiceId)
iis_stop_service(string.ServiceId)
imap_8bit(string.text)
imap_alerts(void)
imap_append(int.stream_id,string.folder,string.message[,string.flags])
imap_base64(string.text)
imap_binary(string.text)
imap_body(int.stream_id,int.msg_no[,int.options])
imap_bodystruct(int.stream_id,int.msg_no,int.section)
imap_check(int.stream_id)
imap_clearflag_full(int.stream_id,string.sequence,string.flag[,int.options])
imap_close(int.stream_id[,int.options])
imap_createmailbox(int.stream_id,string.mailbox)
imap_delete(int.stream_id,int.msg_no[,int.flags])
imap_deletemailbox(int.stream_id,string.mailbox)
imap_errors(void)
imap_expunge(int.stream_id)
imap_fetch_overview(int.stream_id,int.msg_no[,int.flags])
imap_fetchbody(int.stream_id,int.msg_no,int.section[,int.options])
imap_fetchheader(int.stream_id,int.msg_no[,int.options])
imap_fetchstructure(int.stream_id,int.msg_no[,int.options])
imap_get_quota(int.stream_id,string.qroot)
imap_getmailboxes(int.stream_id,string.ref,string.pattern)
imap_getsubscribed(int.stream_id,string.ref,string.pattern)
imap_headerinfo(int.stream_id,int.msg_no[,int.from_length[,int.subject_length[,string.default_host]]])
imap_headers(int.stream_id)
imap_last_error(void)
imap_list(int.stream_id,string.ref,string.pattern)
imap_lsub(int.stream_id,string.ref,string.pattern)
imap_mail(string.to,string.subject,string.message[,string.additional_headers[,string.cc[,string.bcc[,string.rpath]]]])
imap_mail_compose(array.envelope,array.body)
imap_mail_copy(int.stream_id,int.msg_no,string.mailbox[,int.options])
imap_mail_move(int.stream_id,int.msg_no,string.mailbox[,int.options])
imap_mailboxmsginfo(int.stream_id)
imap_mime_header_decode(string.str)
imap_msgno(int.stream_id,int.unique_msg_id)
imap_num_msg(int.stream_id)
imap_num_recent(int.stream_id)
imap_open(string.mailbox,string.user,string.password[,int.options])
imap_ping(int.stream_id)
imap_popen(string.mailbox,string.user,string.password[,int.options])
imap_qprint(string.text)
imap_renamemailbox(int.stream_id,string.old_name,string.new_name)
imap_reopen(int.stream_id,string.mailbox[,int.options])
imap_rfc822_parse_adrlist(string.address_string,string.default_host)
imap_rfc822_parse_headers(string.headers[,string.default_host])
imap_rfc822_write_address(string.mailbox,string.host,string.personal)
imap_scan(int.stream_id,string.ref,string.pattern,string.content)
imap_search(int.stream_id,string.criteria[,long.flags])
imap_set_quota(int.stream_id,string.qroot,int.mailbox_size)
imap_setacl(int.stream_id,string.mailbox,string.id,string.rights)
imap_setflag_full(int.stream_id,string.sequence,string.flag[,int.options])
imap_sort(int.stream_id,int.criteria,int.reverse[,int.options[,string.search_criteria]])
imap_status(int.stream_id,string.mailbox,int.options)
imap_subscribe(int.stream_id,string.mailbox)
imap_thread(int.stream_id[,int.flags])
imap_uid(int.stream_id,int.msg_no)
imap_undelete(int.stream_id,int.msg_no)
imap_unsubscribe(int.stream_id,string.mailbox)
imap_utf7_decode(string.buf)
imap_utf7_encode(string.buf)
imap_utf8(string.string)
ifx_affected_rows(int.resultid)
ifx_blobinfile_mode(int.mode)
ifx_byteasvarchar(int.mode)
ifx_close([int.connid])
ifx_connect([string.database[,string.userid[,string.password]]])
ifx_copy_blob(int.bid)
ifx_create_blob(int.type,int.mode,string.param)
ifx_create_char(string.param)
ifx_do(int.resultid)
ifx_error([int.connection_id])
ifx_errormsg([int.errorcode])
ifx_fetch_row(int.resultid[,mixed.position])
ifx_fieldproperties(int.resultid)
ifx_fieldtypes(int.resultid)
ifx_free_blob(int.bid)
ifx_free_char(int.bid)
ifx_free_result(int.resultid)
ifx_get_blob(int.bid)
ifx_get_char(int.bid)
ifx_getsqlca(int.resultid)
ifx_htmltbl_result(int.resultid[,string.htmltableoptions])
ifx_nullformat(int.mode)
ifx_num_fields(int.resultid)
ifx_num_rows(int.resultid)
ifx_pconnect([string.database[,string.userid[,string.password]]])
ifx_prepare(string.query,int.connid[,int.cursortype][,array.idarray])
ifx_query(string.query,int.connid[,int.cursortype][,array.idarray])
ifx_textasvarchar(int.mode)
ifx_update_blob(int.bid,string.content)
ifx_update_char(int.bid,string.content)
ifxus_close_slob(int.bid)
ifxus_create_slob(int.mode)
ifxus_free_slob(int.bid)
ifxus_open_slob(long.bid,int.mode)
ifxus_read_slob(long.bid,long.nbytes)
ifxus_seek_slob(long.bid,int.mode,long.offset)
ifxus_tell_slob(long.bid)
ifxus_write_slob(long.bid,string.content)
ingres_autocommit([resource.link])
ingres_close([resource.link])
ingres_commit([resource.link])
ingres_connect([string.database[,string.username[,string.password]]])
ingres_fetch_array([int.result_type[,resource.link]])
ingres_fetch_object([int.result_type[,resource.link]])
ingres_fetch_row([resource.link])
ingres_field_length(int.index[,resource.link])
ingres_field_name(int.index[,resource.link])
ingres_field_nullable(int.index[,resource.link])
ingres_field_precision(int.index[,resource.link])
ingres_field_scale(int.index[,resource.link])
ingres_field_type(int.index[,resource.link])
ingres_num_fields([resource.link])
ingres_num_rows([resource.link])
ingres_pconnect([string.database[,string.username[,string.password]]])
ingres_query(string.query[,resource.link])
ingres_rollback([resource.link])
ibase_add_user(string.server,string.dba_user_name,string.dba_password,string.user_name,string.password[,string.first_name][,string.middle_name][,string.last_name])
ibase_blob_add(int.blob_id,string.data)
ibase_blob_cancel(int.blob_id)
ibase_blob_close(int.blob_id)
ibase_blob_create([int.link_identifier])
ibase_blob_echo(string.blob_id_str)
ibase_blob_get(int.blob_id,int.len)
ibase_blob_import([link_identifier,].int.file_id)
ibase_blob_info(string.blob_id_str)
ibase_blob_open(string.blob_id)
ibase_close([int.link_identifier])
ibase_commit([int.link_identifier,].int.trans_number)
ibase_connect(string.database[,string.username][,string.password][,string.charset][,int.buffers][,int.dialect][,string.role])
ibase_delete_user(string.server,string.dba_user_name,string.dba_password,string.username)
ibase_errmsg(void)
ibase_execute(int.query[,int.bind_args[,int....]])
ibase_fetch_object(int.result[,int.blob_flag])
ibase_fetch_row(int.result[,int.blob_flag])
ibase_field_info(int.result,int.field_number)
ibase_free_query(int.query)
ibase_free_result(int.result)
ibase_modify_user(string.server,string.dba_user_name,string.dba_password,string.user_name,string.password[,string.first_name][,string.middle_name][,string.last_name])
ibase_num_fields(int.result)
ibase_pconnect(string.database[,string.username][,string.password][,string.charset][,int.buffers][,int.dialect][,string.role])
ibase_prepare([int.link_identifier,].string.query)
ibase_query([int.link_identifier,].string.query[,int.bind_args])
ibase_rollback([int.link_identifier,].int.trans_number)
ibase_timefmt(string.format)
ibase_trans([int.trans_args[,int.link_identifier]])
ircg_channel_mode(int.connection,string.channel,string.mode_spec,string.nick)
ircg_disconnect(void)
ircg_fetch_error_msg(int.connection)
ircg_get_username(int.connection)
ircg_html_encode(string.html_text)
ircg_ignore_add(resource.connection,string.nick)
ircg_ignore_del(int.connection,string.nick)
ircg_is_conn_alive(int.connection)
ircg_join(int.connection,string.channel)
ircg_kick(int.connection,string.channel,string.nick,string.reason)
ircg_lookup_format_messages(string.name)
ircg_msg(void)
ircg_nick(void)
ircg_nickname_escape(string.nick)
ircg_nickname_unescape(string.nick)
ircg_notice(void)
ircg_part(int.connection,string.channel)
ircg_pconnect(void)
ircg_register_format_messages(string.name,array.messages)
ircg_set_current(int.connection)
ircg_set_file(int.connection,string.path)
ircg_set_on_die(int.connection,string.host,int.port,string.data)
ircg_topic(int.connection,string.channel,string.topic)
ircg_whois(.int.connection,string.nick)
java_last_exception_clear(void)
java_last_exception_get(void)
ldap_8859_to_t61(string.value)
ldap_add(int.link,string.dn,array.entry)
ldap_bind(int.link[,string.dn,string.password])
ldap_compare(int.link,string.dn,string.attr,string.value)
ldap_connect([string.host[,int.port]])
ldap_count_entries(int.link,int.result)
ldap_delete(int.link,string.dn)
ldap_dn2ufn(string.dn)
ldap_err2str(int.errno)
ldap_errno(int.link)
ldap_error(int.link)
ldap_explode_dn(string.dn,int.with_attrib)
ldap_first_attribute(int.link,int.result,int.ber)
ldap_first_entry(int.link,int.result)
ldap_first_reference(int.link,int.result)
ldap_free_result(int.result)
ldap_get_attributes(int.link,int.result)
ldap_get_dn(int.link,int.result)
ldap_get_entries(int.link,int.result)
ldap_get_option(int.link,int.option,mixed.retval)
ldap_get_values(int.link,int.result,string.attribute)
ldap_get_values_len(int.link,int.result,string.attribute)
ldap_list(int.link,string.base_dn,string.filter[,array.attrs[,int.attrsonly[,int.sizelimit[,int.timelimit[,int.deref]]]]])
ldap_mod_add(int.link,string.dn,array.entry)
ldap_mod_del(int.link,string.dn,array.entry)
ldap_mod_replace(int.link,string.dn,array.entry)
ldap_next_attribute(int.link,int.result,int.ber)
ldap_next_entry(int.link,int.entry)
ldap_next_reference(int.link,int.entry)
ldap_parse_reference(int.link,int.entry,array.referrals)
ldap_parse_result(int.link,int.result,int.errcode,string.matcheddn,string.errmsg,array.referrals)
ldap_read(int.link,string.base_dn,string.filter[,array.attrs[,int.attrsonly[,int.sizelimit[,int.timelimit[,int.deref]]]]])
ldap_rename(int.link,string.dn,string.newrdn,string.newparent,boolean.deleteoldrdn);
ldap_search(int.link,string.base_dn,string.filter[,array.attrs[,int.attrsonly[,int.sizelimit[,int.timelimit[,int.deref]]]]])
ldap_set_option(int.link,int.option,mixed.newval)
ldap_set_rebind_proc(int.link,string.callback)
ldap_sort(int.link,int.result,string.sortfilter)
ldap_start_tls(int.link)
ldap_t61_to_8859(string.value)
ldap_unbind(int.link)
mailparse_determine_best_xfer_encoding(resource.fp)
mailparse_msg_create(void)
mailparse_msg_extract_part(resource.rfc2045,string.msgbody[,string.callbackfunc])
mailparse_msg_extract_part_file(resource.rfc2045,string.filename[,string.callbackfunc])
mailparse_msg_free(resource.rfc2045buf)
mailparse_msg_get_part(resource.rfc2045,string.mimesection)
mailparse_msg_get_part_data(resource.rfc2045)
mailparse_msg_get_structure(resource.rfc2045)
mailparse_msg_parse(resource.rfc2045buf,string.data)
mailparse_msg_parse_file(string.filename)
mailparse_rfc822_parse_addresses(string.addresses)
mailparse_stream_encode(resource.sourcefp,resource.destfp,string.encoding)
mailparse_uudecode_all(resource.fp)
mb_convert_encoding(string.str,string.to-encoding[,mixed.from-encoding])
mb_convert_kana(string.str[,string.option][,string.encoding])
mb_convert_variables(string.to-encoding,mixed.from-encoding[,mixed....])
mb_decode_mimeheader(string.string)
mb_decode_numericentity(string.string,array.convmap[,string.encoding])
mb_detect_encoding(string.str[,mixed.encoding_list])
mb_detect_order([mixed.encoding-list])
mb_encode_mimeheader(string.str[,string.charset[,string.transfer-encoding[,string.linefeed]]])
mb_encode_numericentity(string.string,array.convmap[,string.encoding])
mb_get_info([string.type])
mb_http_input([string.type])
mb_http_output([string.encoding])
mb_internal_encoding([string.encoding])
mb_language([string.language])
mb_output_handler(string.contents,int.status)
mb_parse_str(string.encoded_string[,array.result])
mb_preferred_mime_name(string.encoding)
mb_send_mail(string.to,string.subject,string.message[,string.additional_headers[,string.additional_parameters]])
mb_strcut(string.str,int.start[,int.length[,string.encoding]])
mb_strimwidth(string.str,int.start,int.width[,string.trimmarker[,string.encoding]])
mb_strlen(string.str[,string.encoding])
mb_strpos(string.haystack,string.needle[,int.offset[,string.encoding]])
mb_strrpos(string.haystack,string.needle[,string.encoding])
mb_strwidth(string.str[,string.encoding])
mb_substitute_character([mixed.substchar])
mb_substr(string.str,int.start[,int.length[,string.encoding]])
mb_ereg(string.pattern,string.string[,array.registers])
mb_ereg_match(string.pattern,string.string[,string.option])
mb_ereg_replace(string.pattern,string.replacement,string.string[,string.option])
mb_ereg_search([string.pattern[,string.option]])
mb_ereg_search_getpos(void)
mb_ereg_search_getregs(void)
mb_ereg_search_init(string.string[,string.pattern[,string.option]])
mb_ereg_search_pos([string.pattern[,string.option]])
mb_ereg_search_regs([string.pattern[,string.option]])
mb_ereg_search_setpos(int.position)
mb_eregi(string.pattern,string.string[,array.registers])
mb_eregi_replace(string.pattern,string.replacement,string.string)
mb_regex_encoding([string.encoding])
mb_split(string.pattern,string.string[,int.limit])
mcal_append_event(int.stream_id)
mcal_close(int.stream_id[,int.options])
mcal_create_calendar(int.stream_id,string.calendar)
mcal_date_compare(int.ayear,int.amonth,int.aday,int.byear,int.bmonth,int.bday)
mcal_date_valid(int.year,int.month,int.day)
mcal_day_of_week(int.year,int.month,int.day)
mcal_day_of_year(int.year,int.month,int.day)
mcal_days_in_month(int.month,bool.leap_year)
mcal_delete_calendar(int.stream_id,string.calendar)
mcal_delete_event(int.stream_id,int.event_id)
mcal_event_add_attribute(int.stream_id,string.attribute,string.value)
mcal_event_init(int.stream_id)
mcal_event_set_alarm(int.stream_id,int.alarm)
mcal_event_set_category(int.stream_id,string.category)
mcal_event_set_class(int.stream_id,int.class)
mcal_event_set_description(int.stream_id,string.description)
mcal_event_set_end(int.stream_id,int.year,int.month,int.day[[[,int.hour],int.min],int.sec])
mcal_event_set_recur_daily(int.stream_id,int.year,int.month,int.day,int.interval)
mcal_event_set_recur_monthly_mday(int.stream_id,int.year,int.month,int.day,int.interval)
mcal_event_set_recur_monthly_wday(int.stream_id,int.year,int.month,int.day,int.interval)
mcal_event_set_recur_none(int.stream_id)
mcal_event_set_recur_weekly(int.stream_id,int.year,int.month,int.day,int.interval,int.weekdays)
mcal_event_set_recur_yearly(int.stream_id,int.year,int.month,int.day,int.interval)
mcal_event_set_start(int.stream_id,int.year,int.month,int.day[[[,int.hour],int.min],int.sec])
mcal_event_set_title(int.stream_id,string.title)
mcal_expunge(int.stream_id)
mcal_fetch_current_stream_event(int.stream_id)
mcal_fetch_event(int.stream_id,int.eventid[,int.options])
mcal_is_leap_year(int.year)
mcal_list_alarms(int.stream_id,int.year,int.month,int.day,int.hour,int.min,int.sec)
mcal_list_events(int.stream_id,object.begindate[,object.enddate])
mcal_next_recurrence(int.stream_id,int.weekstart,array.next)
mcal_open(string.calendar,string.user,string.password[,int.options])
mcal_popen(string.calendar,string.user,string.password[,int.options])
mcal_rename_calendar(int.stream_id,string.src_calendar,string.dest_calendar)
mcal_reopen(int.stream_id,string.calendar[,int.options])
mcal_snooze(int.stream_id,int.uid)
mcal_store_event(int.stream_id)
mcal_time_valid(int.hour,int.min,int.sec)
mcal_week_of_year(int.day,int.month,int.year)
mcrypt_cbc(int.cipher,string.key,string.data,int.mode[,string.iv])
mcrypt_cbc(int.cipher,string.key,string.data,int.mode,string.iv)
mcrypt_cfb(int.cipher,string.key,string.data,int.mode,string.iv)
mcrypt_cfb(int.cipher,string.key,string.data,int.mode,string.iv)
mcrypt_create_iv(int.size,int.source)
mcrypt_decrypt(string.cipher,string.key,string.data,string.mode,string.iv)
mcrypt_ecb(int.cipher,string.key,string.data,int.mode)
mcrypt_ecb(int.cipher,string.key,string.data,int.mode,string.iv)
mcrypt_enc_get_algorithms_name(resource.td)
mcrypt_enc_get_block_size(resource.td)
mcrypt_enc_get_iv_size(resource.td)
mcrypt_enc_get_key_size(resource.td)
mcrypt_enc_get_modes_name(resource.td)
mcrypt_enc_get_supported_key_sizes(resource.td)
mcrypt_enc_is_block_algorithm(resource.td)
mcrypt_enc_is_block_algorithm_mode(resource.td)
mcrypt_enc_is_block_mode(resource.td)
mcrypt_enc_self_test(resource.td)
mcrypt_encrypt(string.cipher,string.key,string.data,string.mode,string.iv)
mcrypt_generic(resource.td,string.data)
mcrypt_generic_deinit(resource.td)
mcrypt_generic_end(resource.td)
mcrypt_generic_init(resource.td,string.key,string.iv)
mcrypt_get_block_size(int.cipher)
mcrypt_get_block_size(string.cipher,string.module)
mcrypt_get_cipher_name(int.cipher)
mcrypt_get_cipher_name(string.cipher)
mcrypt_get_iv_size(string.cipher,string.module)
mcrypt_get_key_size(int.cipher)
mcrypt_get_key_size(string.cipher,string.module)
mcrypt_list_algorithms([string.lib_dir])
mcrypt_list_modes([string.lib_dir])
mcrypt_module_close(resource.td)
mcrypt_module_get_algo_block_size(string.algorithm[,string.lib_dir])
mcrypt_module_get_algo_key_size(string.algorithm[,string.lib_dir])
mcrypt_module_get_supported_key_sizes(string.algorithm[,string.lib_dir])
mcrypt_module_is_block_algorithm(string.algorithm[,string.lib_dir])
mcrypt_module_is_block_algorithm_mode(string.mode[,string.lib_dir])
mcrypt_module_is_block_mode(string.mode[,string.lib_dir])
mcrypt_module_open(string.cipher,string.cipher_directory,string.mode,string.mode_directory)
mcrypt_module_self_test(string.algorithm[,string.lib_dir])
mcrypt_ofb(int.cipher,string.key,string.data,int.mode,string.iv)
mcrypt_ofb(int.cipher,string.key,string.data,int.mode,string.iv)
mdecrypt_generic(resource.td,string.data)
mhash(int.hash,string.data[,string.key])
mhash_count(void)
mhash_get_block_size(int.hash)
mhash_get_hash_name(int.hash)
mhash_keygen_s2k(int.hash,string.input_password,string.salt,int.bytes)
ming_setcubicthreshold.(int.threshold)
ming_setscale(int.scale)
ming_useswfversion(int.version)
swfaction_init(string)
swfbitmap_getHeight(void)
swfbitmap_getWidth(void)
swfbitmap_init(file[,maskfile])
swfbutton_addAction(SWFAction.action,int.flags)
swfbutton_addShape(SWFCharacter.character,int.flags)
swfbutton_init(void)
swfbutton_keypress(string.str)
swfbutton_setAction(SWFAction)
swfbutton_setDown(SWFCharacter)
swfbutton_setHit(SWFCharacter)
swfbutton_setOver(SWFCharacter)
swfbutton_setUp(SWFCharacter)
swfdisplayitem_addAction(SWFAction.action,int.flags)
swfdisplayitem_addColor(int.r,int.g,int.b[,int.a])
swfdisplayitem_move(int.dx,int.dy)
swfdisplayitem_moveTo(int.x,int.y)
swfdisplayitem_multColor(float.r,float.g,float.b[,float.a])
swfdisplayitem_rotate(float.degrees)
swfdisplayitem_rotateTo(float.degrees)
swfdisplayitem_scale(float.xScale,float.yScale)
swfdisplayitem_scaleTo(float.xScale[,float.yScale])
swfdisplayitem_setDepth(int.depth)
swfdisplayitem_setMatrix(float.a,float.b,float.c,float.d,float.x,float.y)
swfdisplayitem_setName(string.name)
swfdisplayitem_setRatio(float.ratio)
swfdisplayitem_skewX(float.xSkew)
swfdisplayitem_skewXTo(float.xSkew)
swfdisplayitem_skewY(float.ySkew)
swfdisplayitem_skewYTo(float.ySkew)
swffill_init(void)
swffill_moveTo(int.x,int.y)
swffill_rotateTo(float.degrees)
swffill_scaleTo(float.xScale[,float.yScale])
swffill_skewXTo(float.xSkew)
swffill_skewYTo(float.ySkew)
swffont_getAscent(void)
swffont_getDescent(void)
swffont_getLeading(void)
swffont_getWidth(string)
swffont_init(string.filename)
swfgradient_addEntry(float.ratio,string.r,string.g,string.b[,string.a]
swfgradient_init(void)
swfmorph_getShape1(void)
swfmorph_getShape2(void)
swfmorph_init(void)
swfshape_addfill(int.fill,int.flags)
swfshape_drawarc(int.r,float.startAngle,float.endAngle)
swfshape_drawcircle(int.r)
swfshape_drawcubic(float.bx,float.by,float.cx,float.cy,float.dx,float.dy)
swfshape_drawcubic(float.bx,float.by,float.cx,float.cy,float.dx,float.dy)
swfshape_drawcurve(float.adx,float.ady,float.bdx,float.bdy[,float.cdx,float.cdy])
swfshape_drawcurveto(float.ax,float.ay,float.bx,float.by[,float.dx,float.dy])
swfshape_drawglyph(SWFFont.font,string.character[,int.size])
swfshape_drawline(float.dx,float.dy)
swfshape_drawlineto(float.x,float.y)
swfshape_init(void)
swfshape_movepen(float.x,float.y)
swfshape_movepento(float.x,float.y)
swfshape_setleftfill(int.fill)
swfshape_setline(int.width,int.r,int.g,int.b[,int.a])
swfshape_setrightfill(int.fill)
swfsprite_add(SWFCharacter)
swfsprite_init(void)
swfsprite_nextFrame(void)
swfsprite_remove(SWFDisplayItem)
swfsprite_setFrames(int.frames)
swftext_addString(string.text)
swftext_getAscent(void)
swftext_getDescent(void)
swftext_getLeading(void)
swftext_getWidth(string.str)
swftext_init(void)
swftext_moveTo(float.x,float.y)
swftext_setColor(int.r,int.g,int.b[,int.a])
swftext_setFont(class.font)
swftext_setHeight(float.height)
swftext_setSpacing(float.spacing)
swftextfield_addString(string.str)
swftextfield_align(int.alignment)
swftextfield_init(void)
swftextfield_setBounds(float.width,float.height)
swftextfield_setColor(int.r,int.g,int.b[,int.a])
swftextfield_setFont(int.font)
swftextfield_setHeight(float.height)
swftextfield_setIndentation(float.indentation)
swftextfield_setLeftMargin(float)
swftextfield_setLineSpacing(float.space)
swftextfield_setMargins(float.left,float.right)
swftextfield_setName(string.var_name)
swftextfield_setRightMargin(float.margin)
udm_add_search_limit(int.agent,int.var,string.val)
udm_alloc_agent(string.dbaddr[,string.dbmode])
udm_api_version()
udm_cat_list(int.agent,string.category)
udm_cat_path(int.agent,string.category)
udm_check_charset(int.agent,string.charset)
udm_check_stored(int.agent,int.link,string.doc_id)
udm_clear_search_limits(int.agent)
udm_close_stored(int.agent,int.link)
udm_crc32(int.agent,string.str)
udm_errno(int.agent)
udm_error(int.agent)
udm_find(int.agent,string.query)
udm_free_agent(int.agent)
udm_free_ispell_data(int.agent)
udm_free_res(int.res)
udm_get_doc_count(int.agent)
udm_get_res_field(int.res,int.row,int.field)
udm_get_res_param(int.res,int.param)
udm_load_ispell_data(int.agent,int.var,string.val1,[string.charset],string.val2,int.flag)
udm_open_stored(int.agent,string.storedaddr)
udm_set_agent_param(int.agent,int.var,string.val)
msession_call(string.fn_name,[,string.param1.],...[,string.param4])
msession_connect(string.host,string.port)
msession_count(void)
msession_create(string.session)
msession_destroy(string.name)
msession_disconnect(void)
msession_find(string.name,string.value)
msession_get(string.session,string.name,string.default_value)
msession_get_array(string.session)
msession_get_data(string.session)
msession_inc(string.session,string.name)
msession_list(void)
msession_listvar(string.name)
msession_lock(string.name)
msession_plugin(string.session,string.val[,string.param.])
msession_randstr(int.num_chars)
msession_set(string.session,string.name,string.value)
msession_set_array(string.session,array.tuples)
msession_set_data(string.session,string.value)
msession_timeout(string.session[,int.param.])
msession_uniq(int.num_chars)
msession_unlock(string.session,int.key)
msql_affected_rows(int.query)
msql_close([int.link_identifier])
msql_connect([string.hostname[:port]][,string.username][,string.password])
msql_create_db(string.database_name[,int.link_identifier])
msql_data_seek(int.query,int.row_number)
msql_db_query(string.database_name,string.query[,int.link_identifier])
msql_drop_db(string.database_name[,int.link_identifier])
msql_error([int.link_identifier])
msql_fetch_array(int.query[,int.result_type])
msql_fetch_field(int.query[,int.field_offset])
msql_fetch_object(int.query[,int.result_type])
msql_fetch_row(int.query)
msql_field_flags(int.query,int.field_offset)
msql_field_len(int.query,int.field_offet)
msql_field_name(int.query,int.field_index)
msql_field_seek(int.query,int.field_offset)
msql_field_table(int.query,int.field_offset)
msql_field_type(int.query,int.field_offset)
msql_free_result(int.query)
msql_list_dbs([int.link_identifier])
msql_list_fields(string.database_name,string.table_name[,int.link_identifier])
msql_list_tables(string.database_name[,int.link_identifier])
msql_num_fields(int.query)
msql_num_rows(int.query)
msql_pconnect([string.hostname[:port]][,string.username][,string.password])
msql_query(string.query[,int.link_identifier])
msql_result(int.query,int.row[,mixed.field])
msql_select_db(string.database_name[,int.link_identifier])
mssql_bind(int.stmt,string.param_name,mixed.var,int.type
mssql_close([int.connectionid])
mssql_connect([string.servername[,string.username[,string.password]]])
mssql_data_seek(int.result_id,int.offset)
mssql_execute(int.stmt)
mssql_fetch_array(int.result_id[,int.result_type])
mssql_fetch_assoc(int.result_id[,int.result_type])
mssql_fetch_batch(string.result_index)
mssql_fetch_field(int.result_id[,int.offset])
mssql_fetch_object(int.result_id[,int.result_type])
mssql_fetch_row(int.result_id[,int.result_type])
mssql_field_length(int.result_id[,int.offset])
mssql_field_name(int.result_id[,int.offset])
mssql_field_seek(int.result_id,int.offset)
mssql_field_type(int.result_id[,int.offset])
mssql_free_result(string.result_index)
mssql_get_last_message(void)
mssql_guid_string(string.binary[,int.short_format])
mssql_init(string.sp_name[,int.conn_id])
mssql_min_error_severity(int.severity)
mssql_min_message_severity(int.severity)
mssql_next_result(int.result_id)
mssql_num_fields(int.mssql_result_index)
mssql_num_rows(int.mssql_result_index)
mssql_pconnect([string.servername[,string.username[,string.password]]])
mssql_query(string.query[,int.conn_id[,int.batch_size]])
mssql_result(int.result_id,int.row,mixed.field)
mssql_rows_affected(int.conn_id)
mssql_select_db(string.database_name[,int.conn_id])
muscat_close(resource.muscat_handle)
muscat_get(resource.muscat_handle)
muscat_give(resource.muscat_handle,string.string)
muscat_setup(int.size[,string.muscat_dir])
muscat_setup_net(string.muscat_host,int.port)
mysql_affected_rows([int.link_identifier])
mysql_close([int.link_identifier])
mysql_connect([string.hostname[:port][:/path/to/socket]][,string.username][,string.password][,bool.new])
mysql_create_db(string.database_name[,int.link_identifier])
mysql_data_seek(int.result,int.row_number)
mysql_db_query(string.database_name,string.query[,int.link_identifier])
mysql_drop_db(string.database_name[,int.link_identifier])
mysql_errno([int.link_identifier])
mysql_error([int.link_identifier])
mysql_escape_string(string.to_be_escaped)
mysql_fetch_array(int.result[,int.result_type])
mysql_fetch_assoc(int.result)
mysql_fetch_field(int.result[,int.field_offset])
mysql_fetch_lengths(int.result)
mysql_fetch_object(int.result[,int.result_type])
mysql_fetch_row(int.result)
mysql_field_flags(int.result,int.field_offset)
mysql_field_len(int.result,int.field_offset)
mysql_field_name(int.result,int.field_index)
mysql_field_seek(int.result,int.field_offset)
mysql_field_table(int.result,int.field_offset)
mysql_field_type(int.result,int.field_offset)
mysql_free_result(int.result)
mysql_get_client_info(void)
mysql_get_host_info([int.link_identifier])
mysql_get_proto_info([int.link_identifier])
mysql_get_server_info([int.link_identifier])
mysql_insert_id([int.link_identifier])
mysql_list_dbs([int.link_identifier])
mysql_list_fields(string.database_name,string.table_name[,int.link_identifier])
mysql_list_tables(string.database_name[,int.link_identifier])
mysql_num_fields(int.result)
mysql_num_rows(int.result)
mysql_pconnect([string.hostname[:port][:/path/to/socket]][,string.username][,string.password])
mysql_query(string.query[,int.link_identifier][,int.result_mode])
mysql_result(int.result,int.row[,mixed.field])
mysql_select_db(string.database_name[,int.link_identifier])
mysql_unbuffered_query(string.query[,int.link_identifier][,int.result_mode])
ncurses_addch(int.ch)
ncurses_addchnstr(string.s,int.n)
ncurses_addchstr(string.s)
ncurses_addnstr(string.s,int.n)
ncurses_addstr(string.text)
ncurses_assume_default_colors(int.fg,int.bg)
ncurses_attroff(int.attributes)
ncurses_attron(int.attributes)
ncurses_attrset(int.attributes)
ncurses_baudrate(void)
ncurses_beep(void)
ncurses_bkgd(int.attrchar)
ncurses_bkgdset(int.attrchar)
ncurses_border(int.left,int.right,int.top,int.bottom,int.tl_corner,int.tr_corner,int.bl_corner,int.br_corner)
ncurses_can_change_color(void)
ncurses_cbreak(void)
ncurses_clear(void)
ncurses_clrtobot(void)
ncurses_clrtoeol(void)
ncurses_color_set(int.pair)
ncurses_curs_set(int.visibility)
ncurses_def_prog_mode(void)
ncurses_def_shell_mode(void)
ncurses_define_key(string.definition,int.keycode)
ncurses_delay_output(int.milliseconds)
ncurses_delch(void)
ncurses_deleteln(void)
ncurses_delwin(resource.window)
ncurses_doupdate(void)
ncurses_echo(void)
ncurses_echochar(int.character)
ncurses_end(void)
ncurses_erase(void)
ncurses_erasechar(void)
ncurses_filter(void)

ncurses_flash(void)
ncurses_flushinp(void)
ncurses_getch(void)
ncurses_getmouse(array.mevent)
ncurses_halfdelay(int.tenth)
ncurses_has_colors(void)
ncurses_has_ic(void)
ncurses_has_il(void)
ncurses_has_key(int.keycode)
ncurses_hline(int.charattr,int.n)
ncurses_inch(void)
ncurses_init(void)
ncurses_init_color(int.color,int.r,int.g,int.b)
ncurses_init_pair(int.pair,int.fg,int.bg)
ncurses_insch(int.character)
ncurses_insdelln(int.count)
ncurses_insertln(void)
ncurses_insstr(string.text)
ncurses_instr(string.buffer)
ncurses_isendwin(void)
ncurses_keyok(int.keycode,bool.enable)
ncurses_keypad(resource.window,bool.bf)
ncurses_killchar(void)
ncurses_longname(void)
ncurses_mouse_trafo(int.y,int.x,bool.toscreen)
ncurses_mouseinterval(int.milliseconds)
ncurses_mousemask(int.newmask,int.oldmask)
ncurses_move(int.y,int.x)
ncurses_mvaddch(int.y,int.x,int.c)
ncurses_mvaddchnstr(int.y,int.x,string.s,int.n)
ncurses_mvaddchstr(int.y,int.x,string.s)
ncurses_mvaddnstr(int.y,int.x,string.s,int.n)
ncurses_mvaddstr(int.y,int.x,string.s)
ncurses_mvcur(int.old_y,int.old_x,int.new_y,int.new_x)
ncurses_mvdelch(int.y,int.x)
ncurses_mvgetch(int.y,int.x)
ncurses_mvhline(int.y,int.x,int.attrchar,int.n)
ncurses_mvinch(int.y,int.x)
ncurses_mvvline(int.y,int.x,int.attrchar,int.n)
ncurses_mvwaddstr(resource.window,int.y,int.x,string.text)
ncurses_napms(int.milliseconds)
ncurses_newwin(int.rows,int.cols,int.y,int.x)
ncurses_nl(void)
ncurses_nocbreak(void)
ncurses_noecho(void)
ncurses_nonl(void)
ncurses_noqiflush(void)
ncurses_noraw(void)
ncurses_putp(string.text)
ncurses_qiflush(void)
ncurses_raw(void)
ncurses_refresh(int.ch)
ncurses_resetty(void)
ncurses_savetty(void)
ncurses_scr_dump(string.filename)
ncurses_scr_init(string.filename)
ncurses_scr_restore(string.filename)
ncurses_scr_set(string.filename)
ncurses_scrl(int.count)
ncurses_slk_attr(void)
ncurses_slk_attroff(int.intarg)
ncurses_slk_attron(int.intarg)
ncurses_slk_attrset(int.intarg)
ncurses_slk_clear(void)

ncurses_slk_clear(void)
ncurses_slk_color(int.intarg)
ncurses_slk_init(int.intarg)
ncurses_slk_noutrefresh(void)
ncurses_slk_refresh(void)
ncurses_slk_restore(void)
ncurses_slk_set(int.labelnr,string.label,int.format)
ncurses_slk_touch(void)
ncurses_standend(void)
ncurses_standout(void)
ncurses_start_color(void)
ncurses_termattrs(void)
ncurses_termname(void)
ncurses_timeout(int.millisec)
ncurses_typeahead(int.fd)
ncurses_ungetch(int.keycode)
ncurses_ungetmouse(array.mevent)
ncurses_use_default_colors(void)
ncurses_use_env(bool.flag)
ncurses_use_extended_names(bool.flag)
ncurses_vidattr(int.intarg)
ncurses_vline(int.charattr,int.n)
ncurses_waddstr(resource.window,string.str[,int.n])
ncurses_wclear(resource.window)
ncurses_wcolor_set(resource.window,int.color_pair)
ncurses_wgetch(resource.window)
ncurses_wmouse_trafo(resource.window,int.y,int.x,bool.toscreen)
ncurses_wmove(resource.window,int.y,int.x)
ncurses_wnoutrefresh(resource.window)
ncurses_wrefresh(resource.window)
notes_body(string.server,string.mailbox,int.msg_number)
notes_copy_db(string.from_database_name,string.to_database_name[,string.title])
notes_create_db(string.database_name)
notes_create_note(string.database_name,string.form_name)
notes_drop_db(string.database_name)
notes_find_note(string.database_name,string.name[,string.type])
notes_header_info(string.server,string.mailbox,int.msg_number)
notes_list_msgs(string.db)
notes_mark_read(string.database_name,string.user_name,string.note_id)
notes_mark_unread(string.database_name,string.user_name,string.note_id)
notes_nav_create(string.database_name,string.name)
notes_search(string.database_name,string.keywords)
notes_unread(string.database_name,string.user_name)
notes_version(string.database_name)
ocibindbyname(int.stmt,string.name,mixed.&var,int.maxlength[,int.type])
ocicancel(int.stmt)
ocicloselob(object.lob)
ocicollappend(object.collection,value)
ocicollassign(object.collection,object)
ocicollassignelem(object.collection,ndx,val)
ocicollgetelem(object.collection,ndx)
ocicollmax(object.collection)
ocicollsize(object.collection)
ocicolltrim(object.collection,num)
ocicolumnisnull(int.stmt,int.col)
ocicolumnname(int.stmt,int.col)
ocicolumnprecision(int.stmt,int.col)
ocicolumnscale(int.stmt,int.col)
ocicolumnsize(int.stmt,int.col)
ocicolumntype(int.stmt,int.col)
ocicolumntyperaw(int.stmt,int.col)
ocicommit(int.conn)
ocidefinebyname(int.stmt,string.name,mixed.&var[,int.type])
ocierror([int.stmt|conn|global])
ociexecute(int.stmt[,int.mode])
ocifetch(int.stmt)
ocifetchinto(int.stmt,array.&output[,int.mode])
ocifetchstatement(int.stmt,array.&output[,int.skip][,int.maxrows][,int.flags])
ocifreecollection(object.lob)
ocifreedesc(object.lob)
ocifreestatement(int.stmt)
ociinternaldebug(int.onoff)
ociloadlob(object.lob)
ocilogoff(int.conn)
ocilogon(string.user,string.pass[,string.db])
ocinewcollection(int.connection,string.tdo,[string.schema])
ocinewcursor(int.conn)
ocinewdescriptor(int.connection[,int.type])
ocinlogon(string.user,string.pass[,string.db])
ocinumcols(int.stmt)
ociparse(int.conn,string.query)
ociplogon(string.user,string.pass[,string.db])
ociresult(int.stmt,mixed.column)
ocirollback(int.conn)
ocirowcount(int.stmt)
ocisavelob(object.lob)
ocisavelobfile(object.lob)
ociserverversion(int.conn)
ocisetprefetch(int.stmt,int.prefetch_rows)
ocistatementtype(int.stmt)
ociwritelobtofile(object.lob[,string.filename][,int.start][,int.length])
ociwritetemporarylob(int.stmt,int.loc,string.var)
odbc_autocommit(int.connection_id[,int.OnOff])
odbc_binmode(int.result_id,int.mode)
odbc_close(int.connection_id)
odbc_close_all(void)
odbc_columnprivileges(int.connection_id,string.catalog,string.schema,string.table,string.column)
odbc_columns(int.connection_id,string.qualifier,string.owner,string.table_name,string.column_name)
odbc_commit(int.connection_id)
odbc_connect(string.DSN,string.user,string.password[,int.cursor_option])
odbc_cursor(int.result_id)
odbc_error([int.connection_id])
odbc_errormsg([int.connection_id])
odbc_exec(int.connection_id,string.query[,int.flags])
odbc_execute(int.result_id[,array.parameters_array])
odbc_fetch_array(int.result[,int.rownumber])
odbc_fetch_into(int.result_id[,int.rownumber],array.result_array)
odbc_fetch_object(int.result[,int.rownumber])
odbc_fetch_row(int.result_id[,int.row_number])
odbc_field_len(int.result_id,int.field_number)
odbc_field_name(int.result_id,int.field_number)
odbc_field_num(int.result_id,string.field_name)
odbc_field_scale(int.result_id,int.field_number)
odbc_field_type(int.result_id,int.field_number)
odbc_foreignkeys(int.connection_id,string.pk_qualifier,string.pk_owner,string.pk_table,string.fk_qualifier,string.fk_owner,string.fk_table)
odbc_free_result(int.result_id)
odbc_gettypeinfo(int.connection_id[,int.data_type])
odbc_longreadlen(int.result_id,int.length)
odbc_next_result(int.result_id)
odbc_num_fields(int.result_id)
odbc_num_rows(int.result_id)
odbc_pconnect(string.DSN,string.user,string.password[,int.cursor_option])
odbc_prepare(int.connection_id,string.query)
odbc_primarykeys(int.connection_id,string.qualifier,string.owner,string.table)
odbc_procedurecolumns(int.connection_id[,string.qualifier,string.owner,string.proc,string.column])
odbc_procedures(int.connection_id[,string.qualifier,string.owner,string.name])
odbc_result(int.result_id,mixed.field)
odbc_result_all(int.result_id[,string.format])
odbc_rollback(int.connection_id)
odbc_setoption(int.conn_id|result_id,int.which,int.option,int.value)
odbc_specialcolumns(int.connection_id,int.type,string.qualifier,string.owner,string.table,int.scope,int.nullable)
odbc_statistics(int.connection_id,string.qualifier,string.owner,string.name,int.unique,int.accuracy)
odbc_tableprivileges(int.connection_id,string.qualifier,string.owner,string.name)
odbc_tables(int.connection_id[,string.qualifier,string.owner,string.name,string.table_types])
velocis_autocommit(int.index)

velocis_close(int.id)

velocis_commit(int.index)

velocis_connect(string.server,string.user,sting.pass)

velocis_exec(int.index,string.exec_str)

velocis_fetch(int.index)

velocis_fieldname(int.index,int.col)

velocis_fieldnum(int.index)

velocis_freeresult(int.index)

velocis_off_autocommit(int.index)

velocis_result(int.index,int.col)

velocis_rollback(int.index)

openssl_csr_export(resource.csr,string.&out[,bool.notext=true])
openssl_csr_export_to_file(resource.csr,string.outfilename[,bool.notext=true])
openssl_csr_new(array.dn,resource.&privkey[,array.extraattribs,array.configargs])
openssl_csr_sign(mixed.csr,mixed.x509,mixed.priv_key,long.days)
openssl_error_string(void)
openssl_open(string.data,&string.opendata,string.ekey,mixed.privkey)
openssl_pkcs7_decrypt(string.infilename,string.outfilename,mixed.recipcert[,mixed.recipkey])
openssl_pkcs7_encrypt(string.infile,string.outfile,mixed.recipcerts,array.headers[,long.flags])
openssl_pkcs7_sign(string.infile,string.outfile,mixed.signcert,mixed.signkey,array.headers[,long.flags[,string.extracertsfilename]])
openssl_pkcs7_verify(string.filename,long.flags[,string.signerscerts[,array.cainfo[,string.extracerts]]])
openssl_pkey_export(mixed.key,&mixed.out[,string.passphrase[,array.config_args]])
openssl_pkey_export_to_file(mixed.key,string.outfilename[,string.passphrase,array.config_args)
openssl_pkey_free(int.key)
openssl_pkey_get_private(string.key[,string.passphrase])
openssl_pkey_get_public(mixed.cert)
openssl_pkey_new([array.configargs])
openssl_private_decrypt(string.data,string.crypted,mixed.key[,int.padding])
openssl_private_encrypt(string.data,string.crypted,mixed.key[,int.padding])
openssl_public_decrypt(string.data,string.crypted,resource.key[,int.padding])
openssl_public_encrypt(string.data,string.crypted,mixed.key[,int.padding])
openssl_seal(string.data,&string.sealdata,&array.ekeys,array.pubkeys)
openssl_sign(string.data,&string.signature,mixed.key)
openssl_verify(string.data,string.signature,mixed.key)
openssl_x509_check_private_key(mixed.cert,mixed.key)
openssl_x509_checkpurpose(mixed.x509cert,int.purpose,array.cainfo[,string.untrustedfile])
openssl_x509_export(mixed.x509,string.&out[,bool.notext.=.true])
openssl_x509_export_to_file(mixed.x509,string.outfilename[,bool.notext.=.true])
openssl_x509_free(resource.x509)
openssl_x509_parse(mixed.x509[,bool.shortnames=true])
openssl_x509_read(mixed.cert)


ora_bind(int.cursor,string.php_variable_name,string.sql_parameter_name,int.length[,int.type])
ora_close(int.cursor)
ora_columnname(int.cursor,int.column)
ora_columnsize(int.cursor,int.column)
ora_columntype(int.cursor,int.column)
ora_commit(int.connection)
ora_commitoff(int.connection)
ora_commiton(int.connection)
ora_do(int.connection,int.cursor)
ora_error(int.cursor_or_connection)
ora_errorcode(int.cursor_or_connection)
ora_exec(int.cursor)
ora_fetch(int.cursor)
ora_fetch_into(int.cursor,array.result[,int.flags])
ora_getcolumn(int.cursor,int.column)
ora_logoff(int.connection)
ora_logon(string.user,string.password)
ora_numcols(int.cursor)
ora_numrows(int.cursor)
ora_open(int.connection)
ora_parse(int.cursor,string.sql_statement[,int.defer])
ora_plogon(string.user,string.password)
ora_rollback(int.connection)
overload(string.class_entry)
ovrimos_autocommit(int.connection_id,int.OnOff)
ovrimos_close(int.connection)
ovrimos_commit(int.connection_id)
ovrimos_connect(string.host,string.db,string.user,string.password)
ovrimos_cursor(int.result_id)
ovrimos_exec(int.connection_id,string.query)
ovrimos_execute(int.result_id[,array.parameters_array])
ovrimos_fetch_into(int.result_id,array.result_array[,string.how,[int.rownumber]])
ovrimos_fetch_row(int.result_id[,int.how,[int.row_number]])
ovrimos_field_len(int.result_id,int.field_number)
ovrimos_field_name(int.result_id,int.field_number)
ovrimos_field_num(int.result_id,string.field_name)
ovrimos_field_type(int.result_id,int.field_number)
ovrimos_free_result(int.result_id)
ovrimos_longreadlen(int.result_id,int.length)
ovrimos_num_fields(int.result_id)
ovrimos_num_rows(int.result_id)
ovrimos_prepare(int.connection_id,string.query)
ovrimos_result(int.result_id,mixed.field)
ovrimos_result_all(int.result_id[,string.format])
ovrimos_rollback(int.connection_id)
ovrimos_setoption(int.conn_id|result_id,int.which,int.option,int.value)
pcntl_exec(string.path[,array.args[,array.envs]])
pcntl_fork(void)
pcntl_signal(long.signo,mixed.handle)
pcntl_waitpid(long.pid,long.status,long.options)
pcntl_wexitstatus(long.status)
pcntl_wifexited(long.status)
pcntl_wifsignaled(long.status)
pcntl_wifstopped(long.status)
pcntl_wstopsig(long.status)
pcntl_wtermsig(long.status)
preg_grep(string.regex,array.input)
preg_match(string.pattern,string.subject[,array.subpatterns])
preg_match_all(string.pattern,string.subject,array.subpatterns[,int.order])
preg_quote(string.str,string.delim_char)
preg_replace(mixed.regex,mixed.replace,mixed.subject[,int.limit])
preg_replace_callback(mixed.regex,mixed.callback,mixed.subject[,int.limit])
preg_split(string.pattern,string.subject[,int.limit[,int.flags]])
pdf_add_annotation(int.pdfdoc,float.xll,float.yll,float.xur,float.xur,string.title,string.text)
pdf_add_bookmark(int.pdfdoc,string.text[,int.parent,int.open])
pdf_add_launchlink(int.pdfdoc,float.llx,float.lly,float.urx,float.ury,string.filename)
pdf_add_locallink(int.pdfdoc,float.llx,float.lly,float.urx,float.ury,int.page,string.dest)
pdf_add_note(int.pdfdoc,float.llx,float.lly,float.urx,float.ury,string.contents,string.title,string.icon,int.open)
pdf_add_pdflink(int.pdfdoc,float.llx,float.lly,float.urx,float.ury,string.filename,int.page,string.dest)
pdf_add_thumbnail(int.pdf,int.image);
pdf_add_weblink(int.pdfdoc,float.llx,float.lly,float.urx,float.ury,string.url)
pdf_arc(int.pdfdoc,float.x,float.y,float.radius,float.start,float.end)
pdf_arcn(int.pdf,float.x,float.y,float.r,float.alpha,float.beta);
pdf_attach_file(int.pdf,float.lly,float.lly,float.urx,float.ury,string.filename,string.description,string.author,string.mimetype,string.icon)
pdf_begin_page(int.pdfdoc,float.width,float.height)
pdf_begin_pattern(int.pdf,float.width,float.height,float.xstep,float.ystep,int.painttype);
pdf_begin_template(int.pdf,float.width,float.height);
pdf_circle(int.pdfdoc,float.x,float.y,float.radius)
pdf_clip(int.pdfdoc)
pdf_close(int.pdfdoc)
pdf_close_image(int.pdf,int.pdfimage)
pdf_close_pdi(int.pdf,int.doc);
pdf_close_pdi_page(int.pdf,int.page);
pdf_closepath(int.pdfdoc)
pdf_closepath_fill_stroke(int.pdfdoc)
pdf_closepath_stroke(int.pdfdoc)
pdf_concat(int.pdf,float.a,float.b,float.c,float.d,float.e,float.f)
pdf_continue_text(int.pdfdoc,string.text)
pdf_curveto(int.pdfdoc,float.x1,float.y1,float.x2,float.y2,float.x3,float.y3)
pdf_delete(int.pdfdoc)
pdf_end_page(int.pdfdoc)
pdf_end_pattern(int.pdf);
pdf_end_template(int.pdf);
pdf_endpath(int.pdfdoc)
pdf_fill(int.pdfdoc)
pdf_fill_stroke(int.pdfdoc)
pdf_findfont(int.pdfdoc,string.fontname,string.encoding[,int.embed])
pdf_get_buffer(int.pdfdoc)
pdf_get_font(int.pdfdoc)
pdf_get_fontname(int.pdfdoc)
pdf_get_fontsize(int.pdfdoc)
pdf_get_image_height(int.pdf,int.pdfimage)
pdf_get_image_width(int.pdf,int.pdfimage)
pdf_get_majorversion()
pdf_get_minorversion()
pdf_get_parameter(int.pdfdoc,string.key,mixed.modifier)
pdf_get_pdi_parameter(int.pdf,string.key,int.doc,int.page,int.index);
pdf_get_pdi_value(int.pdf,string.key,int.doc,int.page,int.index);
pdf_get_value(int.pdfdoc,string.key,float.modifier)
pdf_initgraphics(int.pdf);
pdf_lineto(int.pdfdoc,float.x,float.y)
pdf_makespotcolor(int.pdf,string.spotname);
pdf_moveto(int.pdfdoc,float.x,float.y)
pdf_new()
pdf_open([int.filedesc])
pdf_open_ccitt(int.pdf,string.filename,int.width,int.height,int.bitreverse,int.k,int.blackls1)
pdf_open_file(int.pdfdoc[,char.filename])
pdf_open_gif(int.pdf,string.giffile)
pdf_open_image(int.pdf,string.type,string.source,string.data,long.length,int.width,int.height,int.components,int.bpc,string.params)
pdf_open_image_file(int.pdf,string.type,string.file,string.stringparam,int.intparam)
pdf_open_jpeg(int.pdf,string.jpegfile)
pdf_open_memory_image(int.pdf,int.image)
pdf_open_pdi(int.pdf,string.filename,string.stringparam,int.intparam);
pdf_open_pdi_page(int.pdf,int.doc,int.page,string.label);
pdf_open_png(int.pdf,string.pngfile)
pdf_open_tiff(int.pdf,string.tifffile)
pdf_place_image(int.pdf,int.pdfimage,float.x,float.y,float.scale)
pdf_place_pdi_page(int.pdf,int.page,float.x,float.y,float.sx,float.sy)
pdf_rect(int.pdfdoc,float.x,float.y,float.width,float.height)
pdf_restore(int.pdfdoc)
pdf_rotate(int.pdfdoc,float.angle)
pdf_save(int.pdfdoc)
pdf_scale(int.pdfdoc,float.x_scale,float.y_scale)
pdf_set_border_color(int.pdfdoc,float.red,float.green,float.blue)
pdf_set_border_dash(int.pdfdoc,float.black,float.white)
pdf_set_border_style(int.pdfdoc,string.style,float.width)
pdf_set_char_spacing(int.pdfdoc,float.space)
pdf_set_duration(int.pdfdoc,float.duration)
pdf_set_font(int.pdfdoc,string.font,float.size,string.encoding[,int.embed])
pdf_set_horiz_scaling(int.pdfdoc,float.scale)
pdf_set_info(int.pdfdoc,string.fieldname,string.value)
pdf_set_info_author(int.pdfdoc,string.author)
pdf_set_info_creator(int.pdfdoc,string.creator)
pdf_set_info_keywords(int.pdfdoc,string.keywords)
pdf_set_info_subject(int.pdfdoc,string.subject)
pdf_set_info_title(int.pdfdoc,string.title)
pdf_set_leading(int.pdfdoc,float.distance)
pdf_set_parameter(int.pdfdoc,string.key,string.value)
pdf_set_text_pos(int.pdfdoc,float.x,float.y)
pdf_set_text_rendering(int.pdfdoc,int.mode)
pdf_set_text_rise(int.pdfdoc,float.value)
pdf_set_transition(int.pdfdoc,int.transition)
pdf_set_value(int.pdfdoc,string.key,float.value)
pdf_set_word_spacing(int.pdfdoc,float.space)
pdf_setcolor(int.pdf,string.type,string.colorspace,float.c1[,float.c2[,float.c3[,float.c4]]]);
pdf_setdash(int.pdfdoc,float.black,float.white)
pdf_setflat(int.pdfdoc,float.value)
pdf_setfont(int.pdfdoc,int.font,float.fontsize)
pdf_setgray(int.pdfdoc,float.value)
pdf_setgray_fill(int.pdfdoc,float.value)
pdf_setgray_stroke(int.pdfdoc,float.value)
pdf_setlinecap(int.pdfdoc,int.value)
pdf_setlinejoin(int.pdfdoc,int.value)
pdf_setlinewidth(int.pdfdoc,float.width)
pdf_setmatrix(int.pdf,float.a,float.b,float.c,float.d,float.e,float.f)
pdf_setmiterlimit(int.pdfdoc,float.value)
pdf_setpolydash(int.pdfdoc,float.darray)
pdf_setrgbcolor(int.pdfdoc,float.red,float.green,float.blue)
pdf_setrgbcolor_fill(int.pdfdoc,float.red,float.green,float.blue)
pdf_setrgbcolor_stroke(int.pdfdoc,float.red,float.green,float.blue)
pdf_show(int.pdfdoc,string.text)
pdf_show_boxed(int.pdfdoc,string.text,float.x_koor,float.y_koor,float.width,float.height,string.mode[,string.feature])
pdf_show_xy(int.pdfdoc,string.text,float.x_koor,float.y_koor)
pdf_skew(int.pdfdoc,float.xangle,float.yangle)
pdf_stringwidth(int.pdfdoc,string.text[,int.font,float.size])
pdf_stroke(int.pdfdoc)
pdf_translate(int.pdfdoc,float.x,float.y)
pfpro_cleanup()
pfpro_init()
pfpro_process(array.parmlist[,string.hostaddress[,int.port,[,int.timeout[,string.proxyAddress[,int.proxyPort[,string.proxyLogon[,string.proxyPassword]]]]]]])
pfpro_process_raw(string.parmlist[,string.hostaddress[,int.port,[,int.timeout[,string.proxyAddress[,int.proxyPort[,string.proxyLogon[,string.proxyPassword]]]]]]])
pfpro_version()
pg_affected_rows(resource.result)
pg_cancel_query(resource.connection)
pg_client_encoding([resource.connection])
pg_close([resource.connection])
pg_connect([string.connection_string].|[string.host,string.port[,string.options[,string.tty,]].string.database)
pg_connection_busy(resource.connection)
pg_connection_reset(resource.connection)
pg_connection_status(resource.connnection)
pg_copy_from(int.connection,string.table_name.,array.rows[,string.delimiter[,string.null_as]])
pg_copy_to(int.connection,string.table_name[,string.delimiter[,string.null_as]])
pg_dbname([resource.connection])
pg_end_copy([resource.connection])
pg_escape_bytea(string.data)
pg_escape_string(string.data)
pg_fetch_array(resource.result,[int.row[,int.result_type]])
pg_fetch_object(resource.result,[int.row[,int.result_type]])
pg_fetch_result(resource.result,[int.row_number,].mixed.field_name)
pg_fetch_row(resource.result,[int.row])
pg_field_is_null(resource.result,[int.row,].mixed.field_name_or_number)
pg_field_name(resource.result,int.field_number)
pg_field_num(resource.result,string.field_name)
pg_field_prtlen(resource.result,[int.row,].mixed.field_name_or_number)
pg_field_size(resource.result,int.field_number)
pg_field_type(resource.result,int.field_number)
pg_free_result(resource.result)
pg_get_result([resource.connection])
pg_host([resource.connection])
pg_last_error([resource.connection])
pg_last_notice(resource.connection)
pg_last_oid(resource.result)
pg_lo_close(resource.large_object)
pg_lo_create(resource.connection)
pg_lo_export([resource.connection,].int.objoid,string.filename)
pg_lo_import([resource.connection,].string.filename)
pg_lo_open([resource.connection,].int.large_object_oid,string.mode)
pg_lo_read(resource.large_object[,int.len])
pg_lo_read_all(resource.large_object)
pg_lo_seek(resource.large_object,int.offset[,int.whence])
pg_lo_tell(resource.large_object)
pg_lo_unlink([resource.connection,].int.large_object_oid)
pg_lo_write(resource.large_object,string.buf[,int.len])
pg_num_fields(resource.result)
pg_num_rows(resource.result)
pg_options([resource.connection])
pg_pconnect([string.connection_string].|[string.host,string.port[,string.options[,string.tty,]].string.database)
pg_port([resource.connection])
pg_put_line([resource.connection,].string.query)
pg_query([resource.connection,].string.query)
pg_result_error(resource.result)
pg_result_status(resource.result)
pg_send_query(resource.connection,string.qeury)
pg_set_client_encoding([resource.connection,].string.encoding)
pg_trace(string.filename[,string.mode[,resource.connection]])
pg_tty([resource.connection])
pg_untrace([resource.connection])
posix_ctermid(void)
posix_getcwd(void)
posix_getegid(void)
posix_geteuid(void)
posix_getgid(void)
posix_getgrgid(long.gid)
posix_getgrnam(string.groupname)
posix_getgroups(void)
posix_getlogin(void)
posix_getpgid(void)
posix_getpgrp(void)
posix_getpid(void)
posix_getppid(void)
posix_getpwnam(string.groupname)
posix_getpwuid(long.uid)
posix_getrlimit(void)
posix_getsid(void)
posix_getuid(void)
posix_isatty(int.fd)
posix_kill(int.pid,int.sig)
posix_mkfifo(void)
posix_setegid(long.uid)
posix_seteuid(long.uid)
posix_setgid(long.uid)
posix_setpgid(long.pid,long.pgid)
posix_setsid(void)
posix_setuid(long.uid)
posix_times(void)
posix_ttyname(int.fd)
posix_uname(void)
printer_abort(resource.handle)
printer_close(resource.connection)
printer_create_brush(resource.handle)
printer_create_dc(int.handle)
printer_create_font(string.face,int.height,int.width,int.font_weight,bool.italic,bool.underline,bool.strikeout,int.orientaton)
printer_create_pen(int.style,int.width,string.color)
printer_delete_brush(resource.brush_handle)
printer_delete_dc(int.handle)
printer_delete_font(int.fonthandle)
printer_delete_pen(resource.pen_handle)
printer_draw_bmp(resource.handle,string.filename,int.x,int.y)
printer_draw_chord(resource.handle,int.rec_x,int.rec_y,int.rec_x1,int.rec_y1,int.rad_x,int.rad_y,int.rad_x1,int.rad_y1)
printer_draw_elipse(resource.handle,int.ul_x,int.ul_y,int.lr_x,int.lr_y)
printer_draw_line(int.handle,int.fx,int.fy,int.tx,int.ty)
printer_draw_pie(resource.handle,int.rec_x,int.rec_y,int.rec_x1,int.rec_y1,int.rad1_x,int.rad1_y,int.rad2_x,int.rad2_y)
printer_draw_rectangle(resource.handle,int.ul_x,int.ul_y,int.lr_x,int.lr_y)
printer_draw_roundrect(resource.handle,int.ul_x,int.ul_y,int.lr_x,int.lr_y,int.width,int.height)
printer_draw_text(resource.handle,string.text,int.x,int.y)
printer_end_doc(int.handle)
printer_end_page(int.handle)
printer_get_option(int.handle,string.option)
printer_list(int.EnumType[,string.Name[,int.Level]])
printer_logical_fontheight(int.handle,int.height)
printer_open([string.printername])
printer_select_brush(resource.printer_handle,resource.brush_handle)
printer_select_font(int.printerhandle,int.fonthandle)
printer_select_pen(resource.printer_handle,resource.pen_handle)
printer_set_option(resource.connection,string.option,mixed.value)
printer_start_doc(int.handle)
printer_start_page(int.handle)
printer_write(resource.connection,string.content)
pspell_add_to_personal(int.pspell,string.word)
pspell_add_to_session(int.pspell,string.word)
pspell_check(int.pspell,string.word)
pspell_clear_session(int.pspell)
pspell_config_create(string.language[,string.spelling[,string.jargon[,string.encoding]]])
pspell_config_ignore(int.conf,int.ignore)
pspell_config_mode(int.conf,long.mode)
pspell_config_personal(int.conf,string.personal)
pspell_config_repl(int.conf,string.repl)
pspell_config_runtogether(int.conf,bool.runtogether)
pspell_config_save_repl(int.conf,bool.save)
pspell_new(string.language[,string.spelling[,string.jargon[,string.encoding[,int.mode]]]])
pspell_new_config(int.config)
pspell_new_personal(string.personal,string.language[,string.spelling[,string.jargon[,string.encoding[,int.mode]]]])
pspell_save_wordlist(int.pspell)
pspell_store_replacement(int.pspell,string.misspell,string.correct)
pspell_suggest(int.pspell,string.word)
qdom_error()
qdom_tree(.string.)
readline([string.prompt])
readline_add_history([string.prompt])
readline_clear_history(void)
readline_completion_function(string.funcname)
readline_info([string.varname][,string.newvalue])
readline_list_history(void)
readline_read_history([string.filename][,int.from][,int.to])
readline_write_history([string.filename])
recode_file(string.request,resource.input,resource.output)
recode_string(string.request,string.str)
satellite_object_to_string(object.obj)
satellite_caught_exception(void)
satellite_exception_id(void)
satellite_exception_value(void)
satellite_get_repository_id(object.obj)
satellite_load_idl(string.file)
session_cache_expire([int.new_cache_expire])
session_cache_limiter([string.new_cache_limiter])
session_decode(string.data)
session_destroy(void)
session_encode(void)
session_get_cookie_params(void)
session_id([string.newid])
session_is_registered(string.varname)
session_module_name([string.newname])
session_name([string.newname])
session_register(mixed.var_names[,mixed....])
session_save_path([string.newname])
session_set_cookie_params(int.lifetime[,string.path[,string.domain[,bool.secure]]])
session_set_save_handler(string.open,string.close,string.read,string.write,string.destroy,string.gc)
session_start(void)
session_unregister(string.varname)
session_unset(void)
session_write_close(void)
shmop_close.(int.shmid)
shmop_delete.(int.shmid)
shmop_open.(int.key,int.flags,int.mode,int.size)
shmop_read.(int.shmid,int.start,int.count)
shmop_size.(int.shmid)
shmop_write.(int.shmid,string.data,int.offset)
confirm_extname_compiled(string.arg)
snmp_get_quick_print(void)
snmp_set_quick_print(int.quick_print)
snmpget(string.host,string.community,string.object_id[,int.timeout[,int.retries]])
snmprealwalk(string.host,string.community,string.object_id[,int.timeout[,int.retries]])
snmpset(string.host,string.community,string.object_id,string.type,mixed.value[,int.timeout[,int.retries]])
snmpwalk(string.host,string.community,string.object_id[,int.timeout[,int.retries]])
socket_accept(resource.socket)
socket_bind(resource.socket,string.addr[,int.port])
socket_close(resource.socket)
socket_connect(resource.socket,string.addr[,int.port])
socket_create(int.domain,int.type,int.protocol)
socket_create_listen(int.port[,int.backlog])
socket_create_pair(int.domain,int.type,int.protocol,array.&fd)
socket_fd_alloc(void)
socket_fd_clear(resource.set,mixed.socket)
socket_fd_free(resource.set)
socket_fd_isset(resource.set,resource.socket)
socket_fd_set(resource.set,mixed.socket)
socket_fd_zero(resource.set)
socket_getopt(resource.socket,int.level,int.optname)
socket_getpeername(resource.socket,string.&addr[,int.&port])
socket_getsockname(resource.socket,string.&addr[,int.&port])
socket_iovec_add(resource.iovec,int.iov_len)
socket_iovec_alloc(int.num_vectors[,int....])
socket_iovec_delete(resource.iovec,int.iov_pos)
socket_iovec_fetch(resource.iovec,int.iovec_position)
socket_iovec_free(resource.iovec)
socket_iovec_set(resource.iovec,int.iovec_position,string.new_val)
socket_last_error(resource.socket)
socket_listen(resource.socket[,int.backlog])
socket_read(resource.socket,int.length[,int.type])
socket_readv(resource.socket,resource.iovec_id)
socket_recv(resource.socket,int.len,int.flags)
socket_recvfrom(resource.socket,string.&buf,int.len,int.flags,string.&name[,int.&port])
socket_recvmsg(resource.socket,resource.iovec,array.&control,int.&controllen,int.&flags,string.&addr[,int.&port])
socket_select(resource.read_fd,resource.write_fd,resource.except_fd,int.tv_sec[,int.tv_usec])
socket_send(resource.socket,string.buf,int.len,int.flags)
socket_sendmsg(resource.socket,resource.iovec,int.flags,string.addr[,int.port])
socket_sendto(resource.socket,string.buf,int.len,int.flags,string.addr[,int.port])
socket_set_nonblock(resource.socket)
socket_setopt(resource.socket,int.level,int.optname,int|array.optval)
socket_shutdown(resource.socket[,int.how])
socket_strerror(int.errno)
socket_write(resource.socket,string.buf[,int.length])
socket_writev(resource.socket,resource.iovec_id)
array_change_key_case(array.input[,int.case=CASE_LOWER])
array_chunk(array.input,int.size[,bool.preserve_keys])
array_count_values(array.input)
array_diff(array.arr1,array.arr2[,array....])
array_fill(int.start_key,int.num,mixed.val)
array_filter(array.input[,mixed.callback])
array_flip(array.input)
array_intersect(array.arr1,array.arr2[,array....])
array_key_exists(mixed.key,array.search)
array_keys(array.input[,mixed.search_value])
array_map(mixed.callback,array.input1[,array.input2.,...])
array_merge(array.arr1,array.arr2[,array....])
array_merge_recursive(array.arr1,array.arr2[,array....])
array_multisort(array.ar1[,SORT_ASC|SORT_DESC[,SORT_REGULAR|SORT_NUMERIC|SORT_STRING]][,array.ar2[,SORT_ASC|SORT_DESC[,SORT_REGULAR|SORT_NUMERIC|SORT_STRING]],...])
array_pad(array.input,int.pad_size,mixed.pad_value)
array_pop(array.stack)
array_push(array.stack,mixed.var[,mixed....])
array_rand(array.input[,int.num_req])
array_reduce(array.input,mixed.callback[,int.initial])
array_reverse(array.input[,bool.preserve.keys])
array_search(mixed.needle,array.haystack[,bool.strict])
array_shift(array.stack)
array_slice(array.input,int.offset[,int.length])
array_splice(array.input,int.offset[,int.length[,array.replacement]])
array_sum(array.input)
array_unique(array.input)
array_unshift(array.stack,mixed.var[,mixed....])
array_values(array.input)
array_walk(array.input,string.funcname[,mixed.userdata])
arsort(array.array_arg[,int.sort_flags])
asort(array.array_arg[,int.sort_flags])
compact(mixed.var_names[,mixed....])
count(mixed.var[,int.mode])
current(array.array_arg)
end(array.array_arg)
extract(array.var_array[,int.extract_type[,string.prefix]])
in_array(mixed.needle,array.haystack[,bool.strict])
key(array.array_arg)
krsort(array.array_arg[,int.sort_flags])
ksort(array.array_arg[,int.sort_flags])
max(mixed.arg1[,mixed.arg2[,mixed....]])
min(mixed.arg1[,mixed.arg2[,mixed....]])
natcasesort(array.array_arg)
natsort(array.array_arg)
next(array.array_arg)
prev(array.array_arg)
range(mixed.low,mixed.high)
reset(array.array_arg)
rsort(array.array_arg[,int.sort_flags])
shuffle(array.array_arg)
sort(array.array_arg[,int.sort_flags])
uasort(array.array_arg,string.cmp_function)
uksort(array.array_arg,string.cmp_function)
usort(array.array_arg,string.cmp_function)
assert(string|bool.assertion)
assert_options(int.what[,mixed.value])
base64_decode(string.str)
base64_encode(string.str)
call_user_func(string.function_name[,mixed.parmeter][,mixed....])
call_user_func_array(string.function_name,array.parameters)
call_user_method(string.method_name,mixed.object[,mixed.parameter][,mixed....])
call_user_method_array(string.method_name,mixed.object,array.params)
connection_aborted(void)
connection_status(void)
constant(string.const_name)
error_log(string.message,int.message_type[,string.destination][,string.extra_headers])
flush(void)
get_cfg_var(string.option_name)
get_current_user(void)
get_magic_quotes_gpc(void)
get_magic_quotes_runtime(void)
getenv(string.varname)
getprotobyname(string.name)
getprotobynumber(int.proto)
getservbyname(string.service,string.protocol)
getservbyport(int.port,string.protocol)
highlight_file(string.file_name)
highlight_string(string.string[,int.return].)
ignore_user_abort(boolean.value)
import_request_variables(string.types[,string.prefix])
ini_get(string.varname)
ini_get_all([string.extension])
ini_restore(string.varname)
ini_set(string.varname,string.newvalue)
ip2long(string.ip_address)
is_uploaded_file(string.path)
long2ip(int.proper_address)
move_uploaded_file(string.path,string.new_path)
parse_ini_file(string.filename[,boolean.process_sections])
print_r(mixed.var)
putenv(string.setting)
register_shutdown_function(string.function_name)
register_tick_function(string.function_name[,mixed.arg[,mixed.....]])
set_magic_quotes_runtime(int.new_setting)
sleep(int.seconds)
unregister_tick_function(string.function_name)
usleep(int.micro_seconds)
get_browser(string.browser_name)
crc32(string.str)
crypt(string.str[,string.salt])
convert_cyr_string(string.str,string.from,string.to)
checkdate(int.month,int.day,int.year)
date(string.format[,int.timestamp])
getdate([int.timestamp])
gmdate(string.format[,int.timestamp])
gmmktime(int.hour,int.min,int.sec,int.mon,int.day,int.year)
gmstrftime(string.format[,int.timestamp])
localtime([int.timestamp[,bool.associative_array]])
mktime(int.hour,int.min,int.sec,int.mon,int.day,int.year)
strftime(string.format[,int.timestamp])
strtotime(string.time,int.now)
time(void)
chdir(string.directory)
chroot(string.directory)
closedir([resource.dir_handle])
dir(string.directory)
getcwd(void)
opendir(string.path)
readdir([resource.dir_handle])
rewinddir([resource.dir_handle])
dl(string.extension_filename)
checkdnsrr(string.host[,string.type])
gethostbyaddr(string.ip_address)
gethostbyname(string.hostname)
gethostbynamel(string.hostname)
getmxrr(string.hostname,array.mxhosts[,array.weight])
escapeshellarg(string.arg)
escapeshellcmd(string.command)
exec(string.command[,array.output[,int.return_value]])
passthru(string.command[,int.return_value])
shell_exec(string.cmd)
system(string.command[,int.return_value])
copy(string.source_file,string.destination_file)
fclose(resource.fp)
feof(resource.fp)
fflush(resource.fp)
fgetc(resource.fp)
fgetcsv(resource.fp,int.length[,string.delimiter])
fgets(resource.fp[,int.length])
fgetss(resource.fp,int.length[,string.allowable_tags])
file(string.filename[,bool.use_include_path])
flock(resource.fp,int.operation[,int.wouldblock])
fopen(string.filename,string.mode[,bool.use_include_path])
fopenstream(string.filename,string.mode)

fpassthru(resource.fp)
fread(resource.fp,int.length)
fscanf(string.str,string.format[,string....])
fseek(resource.fp,int.offset[,int.whence])
fstat(resource.fp)
ftell(resource.fp)
ftruncate(resource.fp,int.size)
fwrite(resource.fp,string.str[,int.length])
get_meta_tags(string.filename[,bool.use_include_path])
mkdir(string.pathname[,int.mode])
pclose(resource.fp)
popen(string.command,string.mode)
readfile(string.filename[,int.use_include_path])
realpath(string.path)
rename(string.old_name,string.new_name)
rewind(resource.fp)
rmdir(string.dirname)
set_file_buffer(resource.fp,int.buffer)
set_socket_blocking(resource.socket,int.mode)
socket_get_status(resource.socket_descriptor)
socket_set_blocking(resource.socket,int.mode)
socket_set_timeout(int.socket_descriptor,int.seconds,int.microseconds)
tempnam(string.dir,string.prefix)
tmpfile(void)
umask([int.mask])
unlink(string.filename)
chgrp(string.filename,mixed.group)
chmod(string.filename,int.mode)
chown.(string.filename,mixed.user)
clearstatcache(void)
disk_free_space(string.path)
disk_total_space(string.path)
file_exists(string.filename)
fileatime(string.filename)
filectime(string.filename)
filegroup(string.filename)
fileinode(string.filename)
filemtime(string.filename)
fileowner(string.filename)
fileperms(string.filename)
filesize(string.filename)
filetype(string.filename)
is_dir(string.filename)
is_executable(string.filename)
is_file(string.filename)
is_link(string.filename)
is_readable(string.filename)
is_writable(string.filename)
lstat(string.filename)
stat(string.filename)
touch(string.filename[,int.time[,int.atime]])
printf(string.format[,mixed.arg1[,mixed....]])
sprintf(string.format[,mixed.arg1[,mixed....]])
vprintf(string.format,array.args)
vsprintf(string.format,array.args)
fsockopen(string.hostname,int.port[,int.errno[,string.errstr[,float.timeout]]])
pfsockopen(string.hostname,int.port[,int.errno[,string.errstr[,float.timeout]]])
ftok(string.pathname,string.proj)
header(string.header[,bool.replace])
headers_sent(void)
setcookie(string.name[,string.value[,int.expires[,string.path[,string.domain[,bool.secure]]]]])
get_html_translation_table([int.table[,int.quote_style]])
htmlentities(string.string[,int.quote_style][,string.charset])
htmlspecialchars(string.string[,int.quote_style][,string.charset])
getimagesize(string.imagefile[,array.info])
php_egg_logo_guid(void)
php_logo_guid(void)
php_sapi_name(void)
php_uname(void)
phpcredits([int.flag])
phpinfo([int.what])
phpversion([string.extension])
zend_logo_guid(void)
iptcembed(string.iptcdata,string.jpeg_file_name[,int.spool])
iptcparse(string.iptcdata)
lcg_value()
levenshtein(string.str1,string.str2)
link(string.target,string.link)
linkinfo(string.filename)
readlink(string.filename)
symlink(string.target,string.link)
ezmlm_hash(string.addr)
mail(string.to,string.subject,string.message[,string.additional_headers[,string.additional_parameters]])
abs(int.number)
acos(float.number)
acosh(float.number)
asin(float.number)
asinh(float.number)
atan(float.number)
atan2(float.y,float.x)
atanh(float.number)
base_convert(string.number,int.frombase,int.tobase)
bindec(string.binary_number)
ceil(float.number)
cos(float.number)
cosh(float.number)
decbin(int.decimal_number)
dechex(int.decimal_number)
decoct(int.decimal_number)
deg2rad(float.number)
exp(float.number)
expm1(float.number)
floor(float.number)
hexdec(string.hexadecimal_number)
hypot(float.num1,float.num2)
is_finite(double.val)
is_infinite(double.val)
is_nan(double.val)
log(float.number)
log10(float.number)
log1p(float.number)
number_format(float.number[,int.num_decimal_places[,string.dec_seperator,string.thousands_seperator]])
octdec(string.octal_number)
pi(void)
pow(number.base,number.exponent)
rad2deg(float.number)
round(float.number[,int.precision])
sin(float.number)
sinh(float.number)
sqrt(float.number)
tan(float.number)
tanh(float.number)
md5(string.str)
md5_file(string.filename)
metaphone(string.text,int.phones)
getrusage([int.who])
gettimeofday(void)
microtime(void)
pack(string.format,mixed.arg1[,mixed.arg2[,mixed....]])
unpack(string.format,string.input)
getlastmod(void)
getmygid(void)
getmyinode(void)
getmypid(void)
getmyuid(void)
quoted_printable_decode(string.str)
getrandmax(void)
mt_getrandmax(void)
mt_rand([int.min,int.max])
mt_srand([int.seed])
rand([int.min,int.max])
srand([int.seed])
ereg(string.pattern,string.string[,array.registers])
ereg_replace(string.pattern,string.replacement,string.string)
eregi(string.pattern,string.string[,array.registers])
eregi_replace(string.pattern,string.replacement,string.string)
split(string.pattern,string.string[,int.limit])
spliti(string.pattern,string.string[,int.limit])
sql_regcase(string.string)
soundex(string.str)
addcslashes(string.str,string.charlist)
addslashes(string.str)
basename(string.path[,string.suffix])
bin2hex(string.data)
chop(string.str[,string.character_mask])
chr(int.ascii)
chunk_split(string.str[,int.chunklen[,string.ending]])
count_chars(string.input[,int.mode])
dirname(string.path)
explode(string.separator,string.str[,int.limit])
hebrev(string.str[,int.max_chars_per_line])
hebrevc(string.str[,int.max_chars_per_line])
implode(array.src,string.glue)
join(array.src,string.glue)
localeconv(void)
ltrim(string.str[,string.character_mask])
nl2br(string.str)
nl_langinfo(int.item)
ord(string.character)
parse_str(string.encoded_string[,array.result])
pathinfo(string.path)
quotemeta(string.str)
rtrim(string.str[,string.character_mask])
setlocale(mixed.category,string.locale)
similar_text(string.str1,string.str2[,float.percent])
sscanf(string.str,string.format[,string....])
str_pad(string.input,int.pad_length[,string.pad_string[,int.pad_type]])
str_repeat(string.input,int.mult)
str_replace(mixed.search,mixed.replace,mixed.subject[,bool.boyer])
str_rot13(string.str)
strchr(string.haystack,string.needle)
strcoll(string.str1,string.str2)
strcspn(string.str,string.mask)
strip_tags(string.str[,string.allowable_tags])
stripcslashes(string.str)
stripslashes(string.str)
stristr(string.haystack,string.needle)
strnatcasecmp(string.s1,string.s2)
strnatcmp(string.s1,string.s2)
strpos(string.haystack,string.needle[,int.offset])
strrchr(string.haystack,string.needle)
strrev(string.str)
strrpos(string.haystack,string.needle)
strspn(string.str,string.mask)
strstr(string.haystack,string.needle)
strtok([string.str,].string.token)
strtolower(string.str)
strtoupper(string.str)
strtr(string.str,string.from,string.to)
substr(string.str,int.start[,int.length])
substr_count(string.haystack,string.needle)
substr_replace(string.str,string.repl,int.start[,int.length])
trim(string.str[,string.character_mask])
ucfirst(string.str)
ucwords(string.str)
wordwrap(string.str[,int.width[,string.break[,int.cut]]])
closelog(void)
define_syslog_variables(void)
openlog(string.ident,int.option,int.facility)
syslog(int.priority,string.message)
floatval(mixed.var)
gettype(mixed.var)
intval(mixed.var[,int.base])
is_array(mixed.var)
is_bool(mixed.var)
is_callable(mixed.var[,bool.syntax_only[,string.callable_name]])
is_float(mixed.var)
is_long(mixed.var)
is_null(mixed.var)
is_numeric(mixed.value)
is_object(mixed.var)
is_resource(mixed.var)
is_scalar(mixed.value)
is_string(mixed.var)
settype(mixed.var,string.type)
strval(mixed.var)
uniqid(string.prefix[,bool.more_entropy])
parse_url(string.url)
rawurldecode(string.str)
rawurlencode(string.str)
urldecode(string.str)
urlencode(string.str)
serialize(mixed.variable)
unserialize(string.variable_representation)
var_dump(mixed.var)
var_export(mixed.var[,int.return])
version_compare(string.ver1,string.ver2[,string.oper])
swf_actiongeturl(string.url,string.target)
swf_actiongotoframe(int.frame_number)
swf_actiongotolabel(string.label)
swf_actionnextframe(void)
swf_actionplay(void)
swf_actionprevframe(void)
swf_actionsettarget(string.target)
swf_actionstop(void)
swf_actiontogglequality(void)
swf_actionwaitforframe(int.frame,int.skipcount)
swf_addbuttonrecord(int.state,int.objid,int.depth)
swf_addcolor(float.r,float.g,float.b,float.a)
swf_closefile(void)
swf_definebitmap(int.objid,string.imgname)
swf_definefont(int.fontid,string.name)
swf_defineline(int.objid,float.x1,float.y1,float.x2,float.y2,float.width)
swf_definepoly(int.obj_id,array.coords,int.npoints,float.width)
swf_definerect(int.objid,float.x1,float.y1,float.x2,float.y2,float.width)
swf_definetext(int.objid,string.str,int.docCenter)
swf_endbutton(void)
swf_enddoaction(void)
swf_endshape(void)
swf_endsymbol(void)
swf_fontsize(float.height)
swf_fontslant(float.slant)
swf_fonttracking(track)
swf_getbitmapinfo(int.bitmapid)
swf_getfontinfo(void)
swf_getframe(void)
swf_labelframe(string.name)
swf_lookat(float.vx,float.vy,float.vz,float.px,float.py,float.pz,float.twist)
swf_modifyobject(int.depth,int.how)
swf_mulcolor(float.r,float.g,float.b,float.a)
swf_nextid(void)
swf_oncondition(int.transitions)
swf_openfile(string.name,float.xsize,float.ysize,float.framerate,float.r,float.g,float.b)
swf_ortho(float.xmin,float.xmax,float.ymin,float.ymax,float.zmin,float.zmax)
swf_ortho2(float.xmin,float.xmax,float.ymin,float.ymax)
swf_perspective(float.fovy,float.aspect,float.near,float.far)
swf_placeobject(int.objid,int.depth)
swf_polarview(float.dist,float.azimuth,float.incidence,float.twist)
swf_popmatrix(void)
swf_posround(int.doit)
swf_pushmatrix(void)
swf_removeobject(int.depth)
swf_rotate(float.angle,string.axis)
swf_scale(float.x,float.y,float.z)
swf_setfont(int.fontid)
swf_setframe(int.frame_number)
swf_shapearc(float.x,float.y,float.r,float.ang1,float.ang2)
swf_shapecurveto(float.x1,float.y1,float.x2,float.y2)
swf_shapecurveto3(float.x1,float.y1,float.x2,float.y2,float.x3,float.y3)
swf_shapefillbitmapclip(int.bitmapid)
swf_shapefillbitmaptile(int.bitmapid)
swf_shapefilloff(void)
swf_shapefillsolid(float.r,float.g,float.b,float.a)
swf_shapelinesolid(float.r,float.g,float.b,float.a,float.width)
swf_shapelineto(float.x,float.y)
swf_shapemoveto(float.x,float.y)
swf_showframe(void)
swf_startbutton(int.objid,int.type)
swf_startdoaction(void)
swf_startshape(int.objid)
swf_startsymbol(int.objid)
swf_textwidth(string.str)
swf_translate(float.x,float.y,float.z)
swf_viewport(float.xmin,float.xmax,float.ymin,float.ymax)
sybase_affected_rows([int.link_id])
sybase_close([int.link_id])
sybase_connect([string.host[,string.user[,string.password[,string.charset]]]])
sybase_data_seek(int.result,int.offset)
sybase_fetch_array(int.result)
sybase_fetch_field(int.result[,int.offset])
sybase_fetch_object(int.result)
sybase_fetch_row(int.result)
sybase_field_seek(int.result,int.offset)
sybase_free_result(int.result)
sybase_get_last_message(void)
sybase_min_error_severity(int.severity)
sybase_min_message_severity(int.severity)
sybase_num_fields(int.result)
sybase_num_rows(int.result)
sybase_pconnect([string.host[,string.user[,string.password[,string.charset]]]])
sybase_query(string.query[,int.link_id])
sybase_result(int.result,int.row,mixed.field)
sybase_select_db(string.database[,int.link_id])
sybase_affected_rows([int.link_id])
sybase_close([int.link_id])
sybase_connect([string.host[,string.user[,string.password[,string.charset]]]])
sybase_data_seek(int.result,int.offset)
sybase_fetch_array(int.result)
sybase_fetch_field(int.result[,int.offset])
sybase_fetch_object(int.result)
sybase_fetch_row(int.result)
sybase_field_seek(int.result,int.offset)
sybase_free_result(int.result)
sybase_get_last_message(void)
sybase_min_client_severity(int.severity)
sybase_min_server_severity(int.severity)
sybase_num_fields(int.result)
sybase_num_rows(int.result)
sybase_pconnect([string.host[,string.user[,string.password[,string.charset]]]])
sybase_query(string.query[,int.link_id])
sybase_result(int.result,int.row,mixed.field)
sybase_select_db(string.database[,int.link_id])
sem_acquire(int.id)
sem_get(int.key[,int.max_acquire[,int.perm]])
sem_release(int.id)
sem_remove(int.id)
shm_attach(int.key[,int.memsize[,int.perm]])
shm_detach(int.shm_identifier)
shm_get_var(int.id,int.variable_key)
shm_put_var(int.shm_identifier,int.variable_key,mixed.variable)
shm_remove(int.shm_identifier)
shm_remove_var(int.id,int.variable_key)
vpopmail_add_alias_domain(string.domain,string.aliasdomain)
vpopmail_add_alias_domain_ex(string.olddomain,string.newdomain)
vpopmail_add_domain(string.domain,string.dir,int.uid,int.gid)
vpopmail_add_domain_ex(string.domain,string.passwd[,string.quota[,string.bounce[,bool.apop]]])
vpopmail_add_user(string.user,string.domain,string.password[,string.gecos[,bool.apop]])
vpopmail_alias_add(string.user,string.domain,string.alias)
vpopmail_alias_del(string.user,string.domain)
vpopmail_alias_del_domain(string.domain)
vpopmail_alias_get(string.alias,string.domain)
vpopmail_alias_get_all(string.domain)
vpopmail_auth_user(string.user,string.domain,string.password[,string.apop])
vpopmail_del_domain(string.domain)
vpopmail_del_domain_ex(string.domain)
vpopmail_del_user(string.user,string.domain)
vpopmail_error(void)
vpopmail_passwd(string.user,string.domain,string.password)
vpopmail_set_user_quota(string.user,string.domain,string.quota)
w32api_deftype(string.typename,string.member1_type,string.member1_name,...)
w32api_init_dtype(string.typename,mixed.val1,mixed.val2);
w32api_invoke_function(string.funcname,....)
w32api_register_function(string.libary,string.function_name)
w32api_set_call_method(int.method)
wddx_add_vars(int.packet_id,.mixed.var_names[,mixed....])
wddx_deserialize(string.packet)
wddx_packet_end(int.packet_id)
wddx_packet_start([string.comment])
wddx_serialize_value(mixed.var[,string.comment])
wddx_serialize_vars(mixed.var_name[,mixed....])
utf8_decode(string.data)
utf8_encode(string.data)
xml_error_string(int.code)
xml_get_current_byte_index(resource.parser)
xml_get_current_column_number(resource.parser)
xml_get_current_line_number(resource.parser)
xml_get_error_code(resource.parser)
xml_parse(resource.parser,string.data[,int.isFinal])
xml_parse_into_struct(resource.parser,string.data,array.&struct,array.&index)
xml_parser_create([string.encoding])
xml_parser_create_ns([string.encoding[,string.sep]])
xml_parser_free(resource.parser)
xml_parser_get_option(resource.parser,int.option)
xml_parser_set_option(resource.parser,int.option,mixed.value)
xml_set_character_data_handler(resource.parser,string.hdl)
xml_set_default_handler(resource.parser,string.hdl)
xml_set_element_handler(resource.parser,string.shdl,string.ehdl)
xml_set_end_namespace_decl_handler(resource.parser,string.hdl)
xml_set_external_entity_ref_handler(resource.parser,string.hdl)
xml_set_notation_decl_handler(resource.parser,string.hdl)
xml_set_object(resource.parser,object.&obj)
xml_set_processing_instruction_handler(resource.parser,string.hdl)
xml_set_start_namespace_decl_handler(resource.parser,string.hdl)
xml_set_unparsed_entity_decl_handler(resource.parser,string.hdl)
xmlrpc_decode(string.xml[,string.encoding])
xmlrpc_decode_request(string.xml,string&.method[,string.encoding])
xmlrpc_encode(mixed.value)
xmlrpc_encode_request(string.method,mixed.params)
xmlrpc_get_type(mixed.value)
xmlrpc_parse_method_descriptions(string.xml)
xmlrpc_server_add_introspection_data(handle.server,array.desc)
xmlrpc_server_call_method(handle.server,string.xml,mixed.user_data[,array.output_options])
xmlrpc_server_create(void)
xmlrpc_server_destroy(handle.server)
xmlrpc_server_register_introspection_callback(handle.server,string.function)
xmlrpc_server_register_method(handle.server,string.method_name,string.function)
xmlrpc_set_type(string.value,string.type)
xslt_create(void)
xslt_errno(resource.processor)
xslt_error(resource.processor)
xslt_free(resource.processor)
xslt_process(resource.processor,string.xml,string.xslt[,mixed.result[,array.args[,array.params]]])
xslt_set_base(resource.processor,string.base)
xslt_set_encoding(resource.processor,string.encoding)
xslt_set_error_handler(resource.processor,mixed.error_func)
xslt_set_log(resource.processor,string.logfile)
xslt_set_sax_handlers(resource.processor,array.handlers)
xslt_set_scheme_handlers(resource.processor,array.handlers)
yaz_addinfo(int.id)
yaz_ccl_conf(int.id,array.package)
yaz_ccl_parse(int.id,string.query,array.res)
yaz_close(int.id)
yaz_connect(string.zurl[.array.options])
yaz_database.(int.id,string.databases)
yaz_element(int.id,string.elementsetname)
yaz_errno(int.id)
yaz_error(int.id)
yaz_es_result(int.id)
yaz_hits(int.id)
yaz_itemorder(int.id,array.package)
yaz_present(int.id)
yaz_range(int.id,int.start,int.number)
yaz_record(int.id,int.pos,string.type)
yaz_scan(int.id,type,query[,flags])
yaz_scan_result(int.id,array.options)
yaz_search(int.id,string.type,string.query)
yaz_sort(int.id,string.sortspec)
yaz_syntax(int.id,string.syntax)
yaz_wait([array.options])
yp_all(string.domain,string.map,string.callback)
yp_cat(string.domain,string.map)
yp_err_string(int.errorcode)
yp_errno()
yp_first(string.domain,string.map)
yp_get_default_domain(void)
yp_master(string.domain,string.map)
yp_match(string.domain,string.map,string.key)
yp_next(string.domain,string.map,string.key)
yp_order(string.domain,string.map)
zip_close(resource.zip)
zip_entry_close(resource.zip_ent)
zip_entry_compressedsize(resource.zip_entry)
zip_entry_compressionmethod(resource.zip_entry)
zip_entry_filesize(resource.zip_entry)
zip_entry_name(resource.zip_entry)
zip_entry_open(resource.zip_dp,resource.zip_entry,string.mode)
zip_entry_read(resource.zip_ent)
zip_open(string.filename)
zip_read(resource.zip)
gzclose(int.zp)
gzcompress(string.data[,int.level])
gzdeflate(string.data[,int.level])
gzencode(string.data[,int.encoding_mode])
gzeof(int.zp)
gzfile(string.filename[,int.use_include_path])
gzgetc(int.zp)
gzgets(int.zp,int.length)
gzgetss(int.zp,int.length[,string.allowable_tags])
gzinflate(string.data,int.length)
gzopen(string.filename,string.mode[,int.use_include_path])
gzpassthru(int.zp)
gzputs(int.zp,string.str[,int.length])
gzread(int.zp,int.length)
gzrewind(int.zp)
gzseek(int.zp,int.offset)
gztell(int.zp)
gzuncompress(string.data,int.length)
gzwrite(int.zp,string.str[,int.length])
ob_gzhandler(string.str,int.mode)
readgzfile(string.filename[,int.use_include_path])
set_time_limit(int.seconds)
ob_clean(void)
ob_end_clean(void)
ob_end_flush(void)
ob_flush(void)
ob_get_contents(void)
ob_get_length(void)
ob_get_level(void)
ob_implicit_flush([int.flag])
ob_start([.string.user_function[,int.chunk_size]])
apache_child_terminate()
apache_lookup_uri(string.URI)
apache_note(string.note_name[,string.note_value])
apache_setenv(string.variable,string.value[,boolean.walk_to_top])
getallheaders(void)
virtual(string.filename)
getallheaders(void)
virtual(string.uri)
