set shell=/bin/bash

let mapleader = ','

set nocompatible
filetype off

" vundle init (github.com/gmarik/vundle)
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" let Vundle manage Vundle, required!
Plugin 'gmarik/vundle'

Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'dense-analysis/ale'

Plugin 'fatih/vim-go'
Plugin 'elzr/vim-json'
Plugin 'plasticboy/vim-markdown'
Plugin 'uarun/vim-protobuf'
Plugin 'rust-lang/rust.vim'
Plugin 'hashivim/vim-terraform'
Plugin 'stephpy/vim-yaml'

Plugin 'narqo/classylight.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

call vundle#end()
filetype plugin indent on

" General settings ============================================================

syntax on

if !has('nvim')
    set ttyfast
endif

" Default encodings
set encoding=utf-8
set termencoding=utf-8
" Encodings for autodetection
set fileencodings=utf-8,cp1251,koi8-r,cp866
set fileformats=unix,dos,mac

" Reload files changed outside vim
set autoread

set backspace=indent,eol,start
set history=100
set undolevels=100

" Indentation
set autoindent
set smartindent
set smarttab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
set nowrap
set linebreak
set nojoinspaces

" Jump N lines when running out of the screen
set scrolljump=7
set scrolloff=10
set sidescrolloff=10
set sidescroll=1

set nocursorline
set nonumber
set numberwidth=2
set ruler
set nolazyredraw

set splitright
set splitbelow

" Hide buffers when not displayed
set hidden

" Show incomplete cmds down the bottom
set showcmd
" Don't show current mode down the bottom, airline shows it
set noshowmode

" Show invisible characters
set list
set listchars=tab:\ \ ,trail:·,extends:»,precedes:«

" Show ↪ at the beginning of wrapped lines
if has("linebreak")
    let &sbr = nr2char(8618).' '
endif

set textwidth=0

set mouse=

" Search settings =============================================================

set incsearch
set hlsearch
set nowrapscan
set ignorecase
set smartcase

if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
endif
if executable('rg')
    set grepprg=rg\ --no-heading\ --vimgrep
    set grepformat=%f:%l:%c:%m
endif

" Backups =====================================================================

set nobackup
set noswapfile
set nowritebackup

" Folds =======================================================================

" dont fold by default
set nofoldenable
set foldmethod=manual

" Completion ==================================================================

set completeopt=menuone,noinsert,noselect

" Make cmdline tab completion similar to bash
" enable <ctrl-n> and <ctrl-p> to scroll through matches
set wildmenu
set wildmode=list:longest:lastused
set wildignore=*.o,*.obj,*~,*.pyc,*.pyo,*.bak
set wildignore+=*DS_Store*
set wildignore+=*.png,*.jpg,*.gif

" ctrl+space for omnifunc's completion
imap <C-Space> <C-x><C-o>
imap <C-@> <C-Space>

" UI ==========================================================================
set background=light

" tell the term has 256 colors
set t_Co=256

colorscheme classylight

" split window separators, etc
set fillchars+=vert:│,fold:⠐,eob:⠿

" set up the gui cursor to look nice
set guicursor=a:ver15-Cursor-blinkon0
set guicursor+=o:hor50-Cursor
set guicursor+=r-cr:hor20-Cursor

" turn off any bells
set novisualbell
set t_vb=

" disable scrollbars
set guioptions-=r
set guioptions-=L
" disable the macvim toolbar
set guioptions-=T

" support for yankring
set viminfo+=!

" Diff settings ===============================================================

" Add ignorance of whitespace to diff
set diffopt=filler,iwhite,vertical,context:15
let g:html_diff_one_file = 1

if &diff
    syntax off
    setl nospell
endif

hi DiffText ctermbg=1

" Keymaps ======================================================================

" Paste mode toggle on <,p>
set pastetoggle=<leader>p

" Stop search highlighting
nmap <silent> <F3> :nohlsearch<CR>
imap <F3> <Esc>:nohlsearch<CR>

imap <c-h> <c-o>h
imap <c-j> <c-o>j
imap <c-k> <c-o>k
imap <c-l> <c-o>l

" No arrow keys, because why bother
nnoremap <up> <nop>
nnoremap <down> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

nnoremap j gj
nnoremap k gk
nnoremap H ^
nnoremap L $

" Resize windows with arrow keys
nnoremap <D-Up> <C-w>+
nnoremap <D-Down> <C-w>-
nnoremap <D-Left> <C-w><
nnoremap <D-Right>  <C-w>>

" Window movement
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" This allows us to save a file as root with the :w!! command, if we have sudo
" privileges, when we're not currently using vim as root
cmap w!! w !sudo tee % >/dev/null

" <leader><leader> toggles between buffers
nnoremap <leader><leader> <c-^>

" Autocmds ====================================================================

" Auto change the directory to the current file I'm working on
autocmd BufEnter * silent! lcd %:p:h

autocmd FileType gitcommit setl tw=68 spell
autocmd FileType go setl ts=4 sts=4 sw=4 noexpandtab
autocmd FileType groovy,perl,ruby setl ts=2 ts=2 sw=2 expandtab
autocmd FileType markdown,txt setl tw=150 syntax=off spell wrap

autocmd FileType help setl nospell

" Plugins settings ============================================================

" === Vundle =====================================
let g:vundle_default_git_proto = 'git'

" === CtrlP ======================================
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_root_markers = ['Makefile', 'go.mod', 'Cargo.toml', 'package.json']
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$|debian$'

" Additional mapping to open CtrlP prompt in find file mode
nnoremap <leader>o :CtrlP<cr>
" Additional mapping for buffer search
nnoremap <leader>b :CtrlPBuffer<cr>

" === Ale ========================================
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0

" disabling highlighting
let g:ale_set_highlights = 0

" configure loclist
let g:ale_set_loclist = 1
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

" setup additional linters
let g:ale_linters = {
\    'go': ['gofmt', 'gopls', 'govet'],
\    'rust': ['analyzer', 'cargo'],
\}
let g:ale_fixers = {
\   'go': ['goimports', 'gopls'],
\   'rust': ['rustfmt'],
\}

let g:ale_rust_cargo_check_all_targets = 0
let g:ale_rust_cargo_check_examples = 1
let g:ale_rust_cargo_use_check = 0
let g:ale_rust_cargo_use_clippy = 1

let g:ale_sign_error = 'Ⓔ'
let g:ale_sign_warning = '△'

" enable airline integration
let g:airline#extensions#ale#enabled = 1

" enable ALE-provided omnicompletion
set omnifunc=ale#completion#OmniFunc

nmap <silent> <leader><F1> :ALEDocumentation<cr>
nmap <silent> <leader><F2> :ALEHover<cr>
nmap <silent> <leader><F6> :ALERename<cr>
nmap <silent> <leader><F7> :ALEFindReferences<cr>

" === Airline ====================================
set laststatus=2

let g:airline_left_sep  = ''
let g:airline_right_sep = ''

let g:airline_theme = 'silver'

" === Git Gutter =================================
if exists('&signcolumn')
    " Vim 7.4.2201
    set signcolumn=yes
else
    let g:gitgutter_sign_column_always = 1
endif

let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

" === JSON =======================================
" disable concealing of double quotes
let g:vim_json_syntax_conceal = 0

" === Go =========================================
" Highlighting of variables that are the same
"let g:go_auto_sameids = 1
" Show type information in status line
"let g:go_auto_type_info = 1

" Autoimports and code formation
"let g:go_fmt_command = 'goimports'
let g:go_fmt_command = 'gopls'
let g:go_rename_command = 'gopls'

" Don't open loclist automatically
let g:go_fmt_fail_silently = 1

au FileType go nmap <leader><F1> :GoDoc<cr>
"au FileType go nmap <leader><F6> :GoRename<cr>
au FileType go nmap <leader><F12> :GoDeclsDir<cr>

" === Rust =======================================
" Runs rustfmt when save buffer
let g:rustfmt_autosave = 1

" === Terraform ==================================
" Automatically format tf and tfvars files with "terraform fmt"
let g:terraform_fmt_on_save = 1
