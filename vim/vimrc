"
set nocompatible
filetype off

" vundle init (github.com/gmarik/vundle)
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" let Vundle manage Vundle, required!
Plugin 'gmarik/vundle'

" Custom bundles
Plugin 'tpope/vim-fugitive'

Plugin 'L9'
Plugin 'FuzzyFinder'
Plugin 'kien/ctrlp.vim'

Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'scrooloose/nerdcommenter'
Plugin 'bling/vim-airline'

Plugin 'neocomplcache'
Plugin 'snipMate'
Plugin 'Tagbar'
Plugin 'mattn/emmet-vim'

Plugin 'delimitMate.vim'
Plugin 'matchit.zip'
Plugin 'michaeljsmith/vim-indent-object'

Plugin 'scrooloose/syntastic'

Plugin 'sukima/xmledit'
Plugin 'tpope/vim-markdown'

Plugin 'pangloss/vim-javascript'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'moll/vim-node'
Plugin 'marijnh/tern_for_vim'

Plugin 'dart-lang/dart-vim-plugin'

Plugin 'sudo.vim'

call vundle#end()

" General options =============================================================

filetype plugin indent on
syntax on

set ttyfast

set encoding=utf-8
" Кодировка по-умолчанию
set termencoding=utf-8
" Список кодировок файлов для автоопределения
set fileencodings=utf-8,cp1251,koi8-r,cp866
" Список форматов файлов
set fileformats=unix,dos,mac

" Reload files changed outside vim
set autoread

set backspace=indent,eol,start
set history=1000
set undolevels=100

" Indentation
set autoindent
set smartindent
set smarttab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Выключаем перенос строк
set nowrap
set nolinebreak

" Jump N lines when running out of the screen
set scrolljump=7
set scrolloff=10
set sidescrolloff=10
set sidescroll=1

set cursorline
set number
set numberwidth=3
set ruler
set nolazyredraw

set splitright
set splitbelow

" Hide buffers when not displayed
set hidden

" Show incomplete cmds down the bottom
set showcmd
" Show current mode down the bottom
set showmode

" Включить подсветку невидимых символов
set list
set listchars=tab:·\ ,trail:·,extends:»,precedes:«

" Использовать <,> в качестве <leader>-кнопки
let mapleader = ","

" Show ↪ at the beginning of wrapped lines
if has("linebreak")
    let &sbr = nr2char(8618).' '
endif

set textwidth=0
if version >= 703
    " mark the ideal max text width
    set colorcolumn=+1
end

" Paste mode toggle on <,p>
set pastetoggle=<leader>p

if has('unnamedplus')
    set clipboard=unnamedplus
endif

" Status line ==================================================================

" Включаем отображение дополнительной информации в статусной строке
set laststatus=2
set statusline=%f%h\ %y\ %m\ %r\ %{&encoding}\

" The statusline flag for syntastic plugin
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

set statusline+=%=Line:%l/%L[%p%%]\ Col:%c\ [%b][0x%B]
set statusline+=\ Buf:%n\

" Search settings =============================================================

" При поиске перескакивать на найденный текст в процессе набора строки
set incsearch
" Включаем подсветку выражения, которое ищется в тексте
set hlsearch
" Останавливать поиск при достижении конца файла
set nowrapscan
" Игнорировать регистр букв при поиске
set ignorecase
" ...но учитывать регистр если есть большие буквы с запросе
set smartcase

" Backups ======================================================================

set nobackup
set noswapfile
set nowb

" Folds ========================================================================

set foldmethod=indent
" dont fold by default
set nofoldenable

" Completion ===================================================================

" Make cmdline tab completion similar to bash
" enable <ctrl-n> and <ctrl-p> to scroll thru matches
set wildmenu
set wildmode=list:longest
set wildignore=*.o,*.obj,*~,*.pyc,*.pyo,*.bak
set wildignore+=*DS_Store*
set wildignore+=*.png,*.jpg,*.gif

" Diff settings ================================================================

" Add ignorance of whitespace to diff
set diffopt=filler,iwhite,vertical,context:15
let g:html_diff_one_file = 1

" GUI ==========================================================================

" tell the term has 256 colors
set t_Co=256

set background=dark
colorscheme xoria256

if has('gui_running')
    "colorscheme mango
    set cmdheight=2
    set guifont=Monaco:h13
    " Automatically resize splits when resizing MacVim window
    autocmd VimResized * wincmd =
endif

" Set up the gui cursor to look nice
set guicursor=n-v-c:block-Cursor-blinkon0
set guicursor+=ve:ver35-Cursor
set guicursor+=o:hor50-Cursor
set guicursor+=i-ci:ver25-Cursor
set guicursor+=r-cr:hor20-Cursor
set guicursor+=sm:block-Cursor-blinkwait175-blinkoff150-blinkon175

" Turn off any bells
set novisualbell
set t_vb=
set gcr=a:blinkon0

" Disable the scrollbars (NERDTree)
set guioptions-=r
set guioptions-=L

" Disable the macvim toolbar
set guioptions-=T

" Macvim settings
if has("gui_macvim")
    set transp=0
    set formatoptions-=tc
    let macvim_hig_shift_movement=1
    set gcr=n:blinkon0
endif

if has("gui_win32") || has("gui_win32s")
    set guifont=Consolas:h12
endif

" Support for yankring
set viminfo+=!

" Keymaps ======================================================================

" Очистить подсветку последнего найденного выражения
nmap <silent> <F3> :nohlsearch<CR>
imap <F3> <Esc>:nohlsearch<CR>

" Add a GUID to the current line
imap <c-J>d <C-r>=substitute(system("uuidgen"), '.$', '', 'g')<CR>

" copy current filename into system clipboard - mnemonic: (c)urrent(f)ilename
nnoremap <silent> <leader>cf :let @* = expand("%:~")<CR>
nnoremap <silent> <leader>cn :let @* = expand("%:t")<CR>

" Позволяем передвигаться с помощью hjkl в Insert mode зажав <ctrl>
imap <c-h> <c-o>h
imap <c-j> <c-o>j
imap <c-k> <c-o>k
imap <c-l> <c-o>l

nnoremap j gj
nnoremap k gk

" Resize windows with arrow keys
nnoremap <D-Up> <C-w>+
nnoremap <D-Down> <C-w>-
nnoremap <D-Left> <C-w><
nnoremap <D-Right>  <C-w>>

" Window movement
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" This allows us to save a file as root with the :w!! command, if we have sudo
" privileges, when we're not currently useing vim as root
cmap w!! w !sudo tee % >/dev/null

" Diff this
nnoremap <leader>dd :windo diffthis<CR>

" Autocmds =====================================================================

" Auto change the directory to the current file I'm working on
autocmd BufEnter * lcd %:p:h

" Customisations based on filetype
autocmd BufNewFile,BufRead *.rss.*.atom setfiletype xml

" For all text files set 'textwidth' to 80 characters.
autocmd FileType text,txt setlocal tw=120

autocmd BufRead,BufNewFile *.md,*.markdown set tw=120 ts=2 sw=2 expandtab
autocmd BufRead,BufNewFile *.wiki set ft=wiki tw=120 ts=2 sw=2 expandtab

autocmd Filetype gitcommit set tw=68  spell

" Custom functions =============================================================

" via: http://rails-bestpractices.com/posts/60-remove-trailing-whitespace
" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
command! StripTrailingWhitespaces call <SID>StripTrailingWhitespaces()
nmap ,w :StripTrailingWhitespaces<CR>

" Show also matching html parenthesis
set matchpairs+=<:>

" Plugins settings =============================================================

" === Vundle ====================================
let g:vundle_default_git_proto = 'git'

" === NERD Tree =================================
" Don't display these kinds of files
let NERDTreeIgnore=['\.pyc$', '\~$']

" Change the current working directory (CWD) whenever the tree root is changed
let NERDTreeChDirMode = 2

" Make nerdtree look nice
" Disables display of the 'Bookmarks' label and 'Press ? for help' text
let NERDTreeMinimalUI = 1
" Tells the NERD tree to use arrows instead of + ~ chars when displaying directories
let NERDTreeDirArrows = 1
let NERDTreeWinSize = 50

let NERDTreeShowHidden=1

" Toggle the NERD Tree on an off
nnoremap <F6> :NERDTreeToggle<CR>
" Open the project tree and expose current file in the nerdtree with Ctrl-\
nnoremap <silent> <C-\> :NERDTreeFind<CR>

" === NERD Tree tabs ============================
" Auto open nerd tree on startup
let g:nerdtree_tabs_open_on_gui_startup = 0
" Focus in the main content window
let g:nerdtree_tabs_focus_on_files = 1

" === NERD Commenter ============================
if has("gui_macvim") && has("gui_running")
    map <D-/> <plug>NERDCommenterToggle<CR>
else
    map <leader>/ <plug>NERDCommenterToggle<CR>
endif

" === CtrlP ======================================
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$|debian$'

" Additional mapping to open CtrlP prompt in find file mode
nnoremap <leader>o :CtrlP<cr>
" Additional mapping for buffer search
nnoremap <leader>b :CtrlPBuffer<cr>

" === Neocomplcache ==============================
" A beter autocomplete system!
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_enable_smart_case = 1

" default # of completions is 100, that's crazy
let g:neocomplcache_max_list = 5

" words less than 3 letters long aren't worth completing
let g:neocomplcache_auto_completion_start_length = 3

" Map standard <Ctrl-N> completion to <Ctrl-Space>
inoremap <C-Space> <C-n>

let g:neocomplcache_force_overwrite_completefunc = 1

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'

" === Syntastic ==================================
" mark syntax errors with :sign
let g:syntastic_enable_signs = 1

" what :sign text contains
let g:syntastic_error_symbol = '██'
let g:syntastic_style_error_symbol = 'S█'
let g:syntastic_warning_symbol = '∙∙'
let g:syntastic_style_warning_symbol = 'S∙'

" automatically jump to the error when saving the file
let g:syntastic_auto_jump = 0
" show the error list automatically (2 to only close error window automatically)
let g:syntastic_auto_loc_list = 2
" don't care about warnings
"let g:syntastic_quiet_warnings = 0

" === Tagbar =====================================
let g:tagbar_iconchars = ['▾', '▸']

nnoremap <F5> :TagbarToggle<cr>

" === Airline ====================================
let g:airline_left_sep = ''
let g:airline_right_sep=''

let g:airline_theme='ubaryd'

" === Tern =======================================
" look up the documentation of something
nnoremap <leader>td  :TernDoc<cr>
" find the type of the thing under the cursor
nnoremap <leader>tt  :TernType<cr>
" jump to the definition of the thing under the cursor
nnoremap <leader>tb  :TernDef<cr>
nnoremap <leader>tsb :TernDefSplit<cr>
" show all references to the variable or property under the cursor
nnoremap <leader>tr  :TernRefs<cr>
" rename the variable under the cursor
nnoremap <leader><F6>  :TernRename<cr>

